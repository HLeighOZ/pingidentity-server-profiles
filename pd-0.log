+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=./bootstrap.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: ./bootstrap.sh'
+ echo_color green '----- Starting hook: ./bootstrap.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
[0;32m----- Starting hook: ./bootstrap.sh[0m
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: ./bootstrap.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ id -u
+ _userID=9031
+ id -g
### Bootstrap
### Using the default container user and group
+ _groupID=9999
+ echo '### Bootstrap'
+ test 9031 -eq 0
+ echo '### Using the default container user and group'
+ awk 'BEGIN{FS=":"}$3~/^9999$/{print $1}' /etc/group
+ _effectiveGroupName=identity
+ test -z identity
+ awk 'BEGIN{FS=":"}$3~/^9031$/{print $1}' /etc/passwd
+ _effectiveUserName=ping
+ test -z ping
+ echo '### Container user and group'
+ echo '###     user : ping (id: 9031)'
+ echo '###     group: identity (id: 9999)'
+ test 1 -ne 1
+ exec /opt/tini -- /opt/entrypoint.sh start-server
### Container user and group
###     user : ping (id: 9031)
###     group: identity (id: 9999)
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/entrypoint.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/entrypoint.sh'
+ echo_color green '----- Starting hook: /opt/entrypoint.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/entrypoint.sh' '\033[0m'
+ source_container_env
[0;32m----- Starting hook: /opt/entrypoint.sh[0m
+ test -f /opt/staging/.env
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ test -z start-server -o start-server '=' start-server
+ . /opt/staging/hooks/pingstate.lib.sh
+ STATE_DIR=/opt/out/container-state
+ . /opt/staging/hooks/pingsecrets.lib.sh
+ echo_green 'Command: start-server'
+ echo_color green 'Command: start-server'
+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' 'Command: start-server' '\033[0m'
[0;32mCommand: start-server[0m
+ process_secrets
+ test  '=' hashicorp
+ echo 'Processing secrets in SECRETS_DIR (if any)...'
Processing secrets in SECRETS_DIR (if any)...
+ process_secrets_env_json
+ test -f '/run/secrets/*.env.json'
+ break
+ process_secrets_json
+ test -f '/run/secrets/*.json'
+ break
+ add_state_info environment_variables
+ _sourceInfo=environment_variables
+ _stateDir=/opt/out/container-state/current
+ mkdir -p /opt/out/container-state/current
+ echo environment_variables
+ sed 's/\//_/g'
+ sed s/^_//
+ _hashFile=environment_variables
+ test environment_variables '=' environment_variables
+ env
+ sort
+ grep -v '^HOST_NAME='
+ getHostName
+ cat /proc/sys/kernel/hostname
+ HOST_NAME=sam-pingdirectory-0
+ getDomainName
+ cat /proc/sys/kernel/domainname
+ _result='(none)'
+ toLower '(none)'
+ printf '%s' '(none)'
+ tr '[:upper:]' '[:lower:]'
+ test '(none)' '=' '(none)'
+ _result=
+ echo 
+ DOMAIN_NAME=
+ export HOST_NAME DOMAIN_NAME
+ date
+ echo_header 'Ping Identity DevOps Docker Image' ' IMAGE_VERSION: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af' ' IMAGE_GIT_REV: 60afc5136eadba04ab321c00a269f068322cefa0' '       STARTED: Mon Sep 13 19:02:42 UTC 2021' '      HOST_NAME: sam-pingdirectory-0' '    DOMAIN_NAME: '
+ echo_bar
################################################################################
+ printf '################################################################################\n'
+ test -n 'Ping Identity DevOps Docker Image'
+ _msg='Ping Identity DevOps Docker Image'
+ shift
+ echo '#    Ping Identity DevOps Docker Image'
+ test -n ' IMAGE_VERSION: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af'
+ _msg=' IMAGE_VERSION: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af'
+ shift
+ echo '#     IMAGE_VERSION: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af'
+ test -n ' IMAGE_GIT_REV: 60afc5136eadba04ab321c00a269f068322cefa0'
+ _msg=' IMAGE_GIT_REV: 60afc5136eadba04ab321c00a269f068322cefa0'
+ shift
+ echo '#     IMAGE_GIT_REV: 60afc5136eadba04ab321c00a269f068322cefa0'
+ test -n '       STARTED: Mon Sep 13 19:02:42 UTC 2021'
+ _msg='       STARTED: Mon Sep 13 19:02:42 UTC 2021'
+ shift
+ echo '#           STARTED: Mon Sep 13 19:02:42 UTC 2021'
+ test -n '      HOST_NAME: sam-pingdirectory-0'
+ _msg='      HOST_NAME: sam-pingdirectory-0'
+ shift
#    Ping Identity DevOps Docker Image
#     IMAGE_VERSION: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
#     IMAGE_GIT_REV: 60afc5136eadba04ab321c00a269f068322cefa0
#           STARTED: Mon Sep 13 19:02:42 UTC 2021
#          HOST_NAME: sam-pingdirectory-0
+ echo '#          HOST_NAME: sam-pingdirectory-0'
+ test -n '    DOMAIN_NAME: '
+ _msg='    DOMAIN_NAME: '
+ shift
+ echo '#        DOMAIN_NAME: '
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ test -z /opt/out/instance/bin/start-server
+ test -n start-server
+ shift
#        DOMAIN_NAME: 
################################################################################
+ test true '=' true
+ clean_staging_dir
+ find /opt/staging
+ awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }'
+ read -r file
+ clean_staging_file /opt/staging/pd.profile/dsconfig/01-remove-host-monitor.dsconfig.subst.default
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/pd.profile/dsconfig/01-remove-host-monitor.dsconfig.subst.default /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/pd.profile/dsconfig/01-remove-console.dsconfig.subst.default
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/pd.profile/dsconfig/01-remove-console.dsconfig.subst.default /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/pd.profile/dsconfig/01-license-gauge.dsconfig.subst.default
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/pd.profile/dsconfig/01-license-gauge.dsconfig.subst.default /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/pd.profile/dsconfig
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/pd.profile/dsconfig /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/pd.profile
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/pd.profile /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/instance/config/java.properties.aarch64.subst.default
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/instance/config/java.properties.aarch64.subst.default /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/instance/config
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/instance/config /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/instance
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/instance /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/pingstate.lib.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/pingstate.lib.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/pingsecrets.lib.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/pingsecrets.lib.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/pingdirectory.lib.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/pingdirectory.lib.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/pingdata.lib.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/pingdata.lib.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/pingcommon.lib.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/pingcommon.lib.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/90-shutdown-sequence.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/90-shutdown-sequence.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/80-post-start.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/80-post-start.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/50-before-post-start.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/50-before-post-start.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/20-restart-sequence.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/20-restart-sequence.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/185-apply-tools-properties.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/185-apply-tools-properties.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/183-run-setup.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/183-run-setup.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/182-pre-setup.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/182-pre-setup.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/181-install-extensions.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/181-install-extensions.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/18-setup-sequence.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/18-setup-sequence.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/17-check-license.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/17-check-license.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/10-start-sequence.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/10-start-sequence.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/09-build-motd.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/09-build-motd.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/07-apply-server-profile.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/07-apply-server-profile.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/06-copy-product-bits.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/06-copy-product-bits.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/05-expand-templates.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/05-expand-templates.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/04-check-variables.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/04-check-variables.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/03-build-run-plan.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/03-build-run-plan.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/02-get-remote-server-profile.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/02-get-remote-server-profile.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks/01-start-server.sh
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks/01-start-server.sh /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/hooks
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/hooks /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging/deprecated-variables.json
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging/deprecated-variables.json /opt/staging-manifest.txt
+ read -r file
+ clean_staging_file /opt/staging
+ test -f /opt/staging-manifest.txt
+ grep -Fxq /opt/staging /opt/staging-manifest.txt
+ read -r file
+ apply_local_server_profile
+ test -n /opt/in
+ ls -A /opt/in
+ test -n 
+ echo 'no local IN_DIR files (/opt/in) found.'
+ run_hook 01-start-server.sh
no local IN_DIR files (/opt/in) found.
+ _hookScript=01-start-server.sh
+ echo 01-start-server.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=01
+ test -z 01
+ run_if_present /opt/staging/hooks/01-start-server.sh.pre
+ _runFile=/opt/staging/hooks/01-start-server.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/01-start-server.sh.pre
+ echo 
+ die_on_error 01 'Error running 01-start-server.sh.pre'

+ _errorCode=0
+ _exitCode=01
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/01-start-server.sh
+ _runFile=/opt/staging/hooks/01-start-server.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/01-start-server.sh
+ sh -x /opt/staging/hooks/01-start-server.sh
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/01-start-server.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/01-start-server.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/01-start-server.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/01-start-server.sh' '\033[0m'
[0;32m----- Starting hook: /opt/staging/hooks/01-start-server.sh[0m
+ source_container_env
+ test -f /opt/staging/.env
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ run_hook 02-get-remote-server-profile.sh
+ _hookScript=02-get-remote-server-profile.sh
+ echo 02-get-remote-server-profile.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=02
+ test -z 02
+ run_if_present /opt/staging/hooks/02-get-remote-server-profile.sh.pre
+ _runFile=/opt/staging/hooks/02-get-remote-server-profile.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/02-get-remote-server-profile.sh.pre
+ echo 

+ die_on_error 02 'Error running 02-get-remote-server-profile.sh.pre'
+ _errorCode=0
+ _exitCode=02
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/02-get-remote-server-profile.sh
+ _runFile=/opt/staging/hooks/02-get-remote-server-profile.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/02-get-remote-server-profile.sh
+ sh -x /opt/staging/hooks/02-get-remote-server-profile.sh
+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/02-get-remote-server-profile.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/02-get-remote-server-profile.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/02-get-remote-server-profile.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/02-get-remote-server-profile.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
[0;32m----- Starting hook: /opt/staging/hooks/02-get-remote-server-profile.sh[0m
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ . /opt/staging/hooks/pingstate.lib.sh
+ STATE_DIR=/opt/out/container-state
+ serverProfilePrefix=SERVER_PROFILE
+ serverProfileName=
+ getParent
+ echo SERVER_PROFILE_PARENT
+ serverProfileParent=SERVER_PROFILE_PARENT
+ serverProfileList=
+ get_value SERVER_PROFILE_PARENT
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_PARENT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ test -n 
+ getProfile SERVER_PROFILE
+ get_value SERVER_PROFILE_URL
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_URL}'
+ printf '%s' https://github.com/pingidentity/pingidentity-server-profiles.git
+ value=https://github.com/pingidentity/pingidentity-server-profiles.git
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z https://github.com/pingidentity/pingidentity-server-profiles.git
+ printf '%s' https://github.com/pingidentity/pingidentity-server-profiles.git
+ unset IFS
+ serverProfileUrl=https://github.com/pingidentity/pingidentity-server-profiles.git
+ get_value SERVER_PROFILE_BRANCH
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_BRANCH}'
+ printf '%s' GDO-931
+ value=GDO-931
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z GDO-931
+ printf '%s' GDO-931
+ unset IFS
+ serverProfileBranch=GDO-931
+ get_value SERVER_PROFILE_PATH
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_PATH}'
+ printf '%s' baseline/pingdirectory
+ value=baseline/pingdirectory
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z baseline/pingdirectory
+ printf '%s' baseline/pingdirectory
+ unset IFS
+ serverProfilePath=baseline/pingdirectory
+ serverProfileGitUserVariable=SERVER_PROFILE_GIT_USER
+ get_value SERVER_PROFILE_GIT_USER
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_GIT_USER}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ serverProfileGitUser=
+ serverProfileGitPasswordVariable=SERVER_PROFILE_GIT_PASSWORD
+ get_value SERVER_PROFILE_GIT_PASSWORD
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_GIT_PASSWORD}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ serverProfileGitPassword=
+ test -z 
+ serverProfileGitUserVariable=SERVER_PROFILE_GIT_USER
+ get_value SERVER_PROFILE_GIT_USER
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_GIT_USER}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ serverProfileGitUser=
+ test -z 
+ serverProfileGitPasswordVariable=SERVER_PROFILE_GIT_PASSWORD
+ get_value SERVER_PROFILE_GIT_PASSWORD
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_GIT_PASSWORD}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ serverProfileGitPassword=
+ test -n 
+ test -n 
+ rm -rf /tmp/server-profile
+ test -n https://github.com/pingidentity/pingidentity-server-profiles.git
+ test true '=' true
+ serverProfileUrlDisplay='*** REDACTED ***'
+ echo 'Getting SERVER_PROFILE'
+ echo '  git url: *** REDACTED ***'
Getting SERVER_PROFILE
+ test -n GDO-931
+ echo '   branch: GDO-931'
+ test -n baseline/pingdirectory
+ echo '     path: baseline/pingdirectory'
  git url: *** REDACTED ***
   branch: GDO-931
+ _gitCloneStderrFile=/tmp/cloneStderr.txt
     path: baseline/pingdirectory
+ git clone --depth 1 --branch GDO-931 https://github.com/pingidentity/pingidentity-server-profiles.git /tmp/server-profile
+ test 0 -ne 0
+ rm /tmp/cloneStderr.txt
+ echo 'Checking for security filename issues...*.jwk *.pin'
Checking for security filename issues...*.jwk *.pin
+ security_filename_check /tmp/server-profile '*.jwk'
+ _scPath=/tmp/server-profile
+ _patternToCheck='*.jwk'
+ test -z 
+ TOTAL_SECURITY_VIOLATIONS=0
+ _tmpSC=/tmp/.securityCheck
+ test -d /tmp/server-profile
+ pwd
+ _tmpPWD=/opt
+ cd /tmp/server-profile
+ find . -type f -name '*.jwk'
+ test -d /tmp/server-profile
+ cd /opt
+ awk 'END{print NR}' /tmp/.securityCheck
+ _numViolations=5
+ test 5 -gt 0
+ test false '=' true
+ echo_green 'SECURITY_CHECKS_FILENAME: 5 files found matching file pattern *.jwk'
+ echo_color green 'SECURITY_CHECKS_FILENAME: 5 files found matching file pattern *.jwk'
+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
[0;32mSECURITY_CHECKS_FILENAME: 5 files found matching file pattern *.jwk[0m
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' 'SECURITY_CHECKS_FILENAME: 5 files found matching file pattern *.jwk' '\033[0m'
+ cat_indent /tmp/.securityCheck
+ test -f /tmp/.securityCheck
+ sed 's/^/    /'
+ TOTAL_SECURITY_VIOLATIONS=5
+ export TOTAL_SECURITY_VIOLATIONS
+ security_filename_check /tmp/server-profile '*.pin'
+ _scPath=/tmp/server-profile
+ _patternToCheck='*.pin'
+ test -z 5
+ _tmpSC=/tmp/.securityCheck
+ test -d /tmp/server-profile
    ./baseline/pingfederate/instance/server/default/data/pf.jwk
    ./ci-tests/pa-bad-import/instance/conf/pa.jwk
    ./ci-tests/pa-h2-2FedM0re/instance/conf/pa.jwk
    ./getting-started/pingfederate/instance/server/default/data/pf.jwk
    ./pa-clustering/pingaccess/instance/conf/pa.jwk
+ pwd
+ _tmpPWD=/opt
+ cd /tmp/server-profile
+ find . -type f -name '*.pin'
+ test -d /tmp/server-profile
+ cd /opt
[0;32mSECURITY_CHECKS_FILENAME: 4 files found matching file pattern *.pin[0m
    ./baseline/pingdataconsole/.sec/.keystore.pin
    ./baseline/pingdirectory/instance/config/keystore.pin
    ./baseline/pingdirectory/instance/config/truststore.pin
    ./pingdataconsole-sso/pingdataconsole/.sec/.keystore.pin
+ awk 'END{print NR}' /tmp/.securityCheck
+ _numViolations=4
+ test 4 -gt 0
+ test false '=' true
+ echo_green 'SECURITY_CHECKS_FILENAME: 4 files found matching file pattern *.pin'
+ echo_color green 'SECURITY_CHECKS_FILENAME: 4 files found matching file pattern *.pin'
+ toLower green
+ + trprintf '[:upper:]' '%s' '[:lower:]' green

+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' 'SECURITY_CHECKS_FILENAME: 4 files found matching file pattern *.pin' '\033[0m'
+ cat_indent /tmp/.securityCheck
+ test -f /tmp/.securityCheck
+ sed 's/^/    /'
+ TOTAL_SECURITY_VIOLATIONS=9
+ export TOTAL_SECURITY_VIOLATIONS
+ test 9 -gt 0
+ test false '=' true
+ echo_green 'Security Violations Allowed! (total=9) SECURITY_CHECKS_STRICT=false'
+ echo_color green 'Security Violations Allowed! (total=9) SECURITY_CHECKS_STRICT=false'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' 'Security Violations Allowed! (total=9) SECURITY_CHECKS_STRICT=false' '\033[0m'
+ cp -Rf /tmp/server-profile/baseline/pingdirectory/. /opt/staging
[0;32mSecurity Violations Allowed! (total=9) SECURITY_CHECKS_STRICT=false[0m
+ die_on_error 142 'Copy to staging failure'
+ _errorCode=0
+ _exitCode=142
+ shift
+ test 0 -ne 0
+ add_state_info /opt/staging
+ _sourceInfo=/opt/staging
+ _stateDir=/opt/out/container-state/current
+ mkdir -p /opt/out/container-state/current
+ sed s/^_//
+ sed 's/\//_/g'
+ echo /opt/staging
+ _hashFile=opt_staging
+ test /opt/staging '=' environment_variables
+ test -f /opt/staging
+ test -d /opt/staging
+ find /opt/staging -type f -print
+ xargs sha256sum
+ sort
+ echo
+ compare_state_info

+ mktemp -d
+ _tmpStateDir=/tmp/tmp.lOOgNi
+ _currState=current
+ find /opt/out/container-state -type d -maxdepth 1 '!' -name current '!' -path .
+ tail -1
+ sed 's/.//;s/\///'
No previous state to compare.
+ _prevState=optout/container-state
+ _stateChanged=0
+ test '!' -d /opt/out/container-state/current
+ test -z optout/container-state
+ test '!' -d /opt/out/container-state/optout/container-state
+ echo 'No previous state to compare.'
+ test 0 '!=' 0
+ rm -rf /tmp/tmp.lOOgNi
+ flash_state_info
+ date '+%Y%m%d%H%M%S%Z'
+ _stateId=20210913190246UTC
+ test -d /opt/out/container-state/current
+ mv /opt/out/container-state/current /opt/out/container-state/20210913190246UTC
+ _env_vars_file=/opt/staging/env_vars
+ test -f /opt/staging/env_vars
+ grep .suppress-container-warning /opt/staging/env_vars
+ test 0 -ne 0
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables imported from server-profile/env_vars'
+ echo_bar
+ printf '################################################################################\n'
+ cat /opt/staging/env_vars
+ echo 
+ return 0
+ die_on_error 02 'Error running 02-get-remote-server-profile.sh'
+ _errorCode=0
+ _exitCode=02
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/02-get-remote-server-profile.sh.post
+ _runFile=/opt/staging/hooks/02-get-remote-server-profile.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/02-get-remote-server-profile.sh.post
+ echo 
+ die_on_error 02 'Error running 02-get-remote-server-profile.sh.post'
+ _errorCode=0
+ _exitCode=02
+ shift
+ test 0 -ne 0
+ run_hook 03-build-run-plan.sh
+ _hookScript=03-build-run-plan.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ echo 03-build-run-plan.sh
+ _hookExit=03
+ test -z 03
+ run_if_present /opt/staging/hooks/03-build-run-plan.sh.pre
+ _runFile=/opt/staging/hooks/03-build-run-plan.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/03-build-run-plan.sh.pre
+ echo 
+ die_on_error 03 'Error running 03-build-run-plan.sh.pre'
+ _errorCode=0
+ _exitCode=03
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/03-build-run-plan.sh
+ _runFile=/opt/staging/hooks/03-build-run-plan.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/03-build-run-plan.sh
+ sh -x /opt/staging/hooks/03-build-run-plan.sh


+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/03-build-run-plan.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/03-build-run-plan.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/03-build-run-plan.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/03-build-run-plan.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
[0;32m----- Starting hook: /opt/staging/hooks/03-build-run-plan.sh[0m
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ . /opt/staging/hooks/pingdata.lib.sh
+ test true '=' true
+ set -x
+ SETUP_ARGUMENTS_FILE=/opt/staging/pd.profile/setup-arguments.txt
+ _configLDIF=/opt/out/instance/config/config.ldif
+ JVM_STATE_DIR=/opt/out/jvm-settings-state
+ . /opt/staging/hooks/pingdirectory.lib.sh
+ . /opt/staging/hooks/pingdata.lib.sh
+ test true '=' true
+ set -x
+ SETUP_ARGUMENTS_FILE=/opt/staging/pd.profile/setup-arguments.txt
+ _configLDIF=/opt/out/instance/config/config.ldif
+ JVM_STATE_DIR=/opt/out/jvm-settings-state
+ test true '=' true
+ set -x
+ buildRunPlan
+ mktemp
+ _fullPlan=/tmp/tmp.KmNhAk
+ mktemp
+ _planSteps=/tmp/tmp.nNpjbf
+ echo KUBERNETES
+ tr '[:lower:]' '[:upper:]'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=UNKNOWN
+ PD_STATE=UNKNOWN
+ SERVER_UUID_FILE=/opt/out/instance/config/server.uuid
+ test -f /opt/out/instance/config/server.uuid
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ test -d /opt/out/instance
+ getHostName
+ cat /proc/sys/kernel/hostname
+ _podName=sam-pingdirectory-0
+ _ordinal=0
+ getPingDataInstanceName
+ test START '=' RESTART
+ getHostName
+ cat /proc/sys/kernel/hostname
+ _podInstanceName=sam-pingdirectory-0
+ POD_HOSTNAME=sam-pingdirectory-0
+ _podLocation=Docker
+ POD_LDAPS_PORT=1636
+ test PingDirectory '=' PingDirectory
+ _podReplicationPort=8989
+ echo '
    ###################################################################################
    #            ORCHESTRATION_TYPE: KUBERNETES
    #                      HOST_NAME: sam-pingdirectory-0
    #                    serverUUID: 
    #'
+ test KUBERNETES '=' KUBERNETES
+ test -z sam-pingdirectory
+ test -z sam-pingdirectory-cluster
+ test -z 'usa aus'
+ test -z usa
+ test -z usa
+ _clusterMode=multi
+ test -z sam-pingdirectory-
+ test -z .usa.internal.ping-cluster.com
+ test -z .usa.internal.ping-cluster.com
+ test false '=' true
+ _incrementPortsMsg='K8S_INCREMENT_PORTS not used ==> Using same ports for all instances - LDAPS_PORT (1636)'
+ test PingDirectory '=' PingDirectory
+ _incrementPortsMsg='K8S_INCREMENT_PORTS not used ==> Using same ports for all instances - LDAPS_PORT (1636), REPLICATION_PORT (8989)'
+ SEED_LDAPS_PORT=1636
+ test PingDirectory '=' PingDirectory
+ _seedReplicationPort=8989
+ test multi '=' single
+ test multi '=' multi
+ _podInstanceName=sam-pingdirectory-0.usa
+ eval 'echo sam-pingdirectory-0.usa.internal.ping-cluster.com'
+ echo sam-pingdirectory-0.usa.internal.ping-cluster.com
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ _seedInstanceName=sam-pingdirectory-0.usa
+ eval 'echo sam-pingdirectory-0.usa.internal.ping-cluster.com'
+ echo sam-pingdirectory-0.usa.internal.ping-cluster.com
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ test false '=' true
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-0.usa
+ echo 'We are the SEED server (sam-pingdirectory-0.usa)'
+ test -z 
We are the SEED server (sam-pingdirectory-0.usa)
+ wc -w
+ getIPsForDomain sam-pingdirectory-cluster
+ getent ahosts sam-pingdirectory-cluster
+ grep STREAM
+ awk '{print $1}'
+ _numHosts=1
+ echo 'Number of servers available in this domain: 1'
+ test 1 -eq 0
Number of servers available in this domain: 1
+ test 1 -eq 1
+ getIP sam-pingdirectory-0.usa.internal.ping-cluster.com
+ getent hosts sam-pingdirectory-0.usa.internal.ping-cluster.com
+ awk '{print $1}'
+ getIPsForDomain sam-pingdirectory-cluster
+ getent ahosts sam-pingdirectory-cluster
+ grep STREAM
+ awk '{print $1}'
+ test  '=' 10.52.90.144
+ echo '#
    #         K8S_STATEFUL_SET_NAME: sam-pingdirectory
    # K8S_STATEFUL_SET_SERVICE_NAME: sam-pingdirectory-cluster
    #
    #                  K8S_CLUSTERS: usa aus  (multi cluster)
    #                   K8S_CLUSTER: usa
    #              K8S_SEED_CLUSTER: usa
    #              K8S_NUM_REPLICAS: 9
    #       K8S_POD_HOSTNAME_PREFIX: sam-pingdirectory-
    #       K8S_POD_HOSTNAME_SUFFIX: .usa.internal.ping-cluster.com
    #      K8S_SEED_HOSTNAME_SUFFIX: .usa.internal.ping-cluster.com
    #           K8S_INCREMENT_PORTS: false (K8S_INCREMENT_PORTS not used ==> Using same ports for all instances - LDAPS_PORT (1636), REPLICATION_PORT (8989))
    #
    #'
+ test KUBERNETES '=' COMPOSE
+ test KUBERNETES '=' DIRECTED
+ test -z KUBERNETES
+ echo '    #     Startup Plan
    #        - manage-profile setup'
+ test PingDirectory '=' PingDirectory
+ echo '    #        - repl enable (from SEED Server-sam-pingdirectory-0.usa)
    #        - repl init   (from topology.json, from SEED Server-sam-pingdirectory-0.usa)'
+ echo '
    ###################################################################################
    #
    #                      PD_STATE: SETUP
    #                      RUN_PLAN: START
    #'
+ cat /tmp/tmp.nNpjbf
+ echo '    ###################################################################################
    #
    # POD Server Information
    #                 instance name: sam-pingdirectory-0.usa
    #                      hostname: sam-pingdirectory-0.usa.internal.ping-cluster.com
    #                      location: usa
    #                    ldaps port: 1636'
+ test PingDirectory '=' PingDirectory
+ echo '    #              replication port: 8989'
+ echo '    #
    # SEED Server Information
    #                 instance name: sam-pingdirectory-0.usa
    #                      hostname: sam-pingdirectory-0.usa.internal.ping-cluster.com
    #                      location: usa
    #                    ldaps port: 1636'
+ test PingDirectory '=' PingDirectory
+ echo '    #              replication port: 8989'
+ echo '    ###################################################################################
    '
+ test '!' -z 'usa aus'
+ test '!' -z 9
+ _numReplicas=9
+ _clusterWidth=0
+ _podWidth=0
+ _portWidth=5
+ test 3 -gt 0
+ _clusterWidth=3
+ i=0
+ test 0 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 0
+ _podWidth=23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=1
+ test 1 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=2
+ test 2 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=3
+ test 3 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=4
+ test 4 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=5
+ test 5 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=6
+ test 6 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=7
+ test 7 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=8
+ test 8 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=9
+ test 9 -lt 9
+ test 3 -gt 3
+ i=0
+ test 0 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=1
+ test 1 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=2
+ test 2 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=3
+ test 3 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=4
+ test 4 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=5
+ test 5 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=6
+ test 6 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=7
+ test 7 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=8
+ test 8 -lt 9
+ _pod=sam-pingdirectory-0.aus

    ###################################################################################
    #
    #                      PD_STATE: SETUP
    #                      RUN_PLAN: START
    #

    ###################################################################################
    #            ORCHESTRATION_TYPE: KUBERNETES
    #                      HOST_NAME: sam-pingdirectory-0
    #                    serverUUID: 
    #
+ test 23 -gt 23
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ i=9
+ test 9 -lt 9
+ test PingDirectory '=' PingDirectory
+ totalWidth=44
+ _clusterWidth=30
+ _dashes=--------------------------------------------------------------------------------
+ _clusterFormat='# | %-4s   %-4s | CLUSTER: %-30s |\n'
+ test PingDirectory '=' PingDirectory
+ printf '# +------+------+-%.23s-+-%.5s-+-%.5s-+\n' -------------------------------------------------------------------------------- -------------------------------------------------------------------------------- --------------------------------------------------------------------------------
+ _separatorRow='# +------+------+-------------------------+-------+-------+'
+ _podFormat='# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'
+ echo '# +------+------+-------------------------+-------+-------+'
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n' SEED POD Instance LDAPS REPL
+ _ordinal=0
+ test 0 -lt 9
+ _pod=sam-pingdirectory-0.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 0 '=' 0
+ _seedIndicator='***'
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-0.usa
+ _podIndicator='***'
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test  '!=' usa
+ echo '# +------+------+-------------------------+-------+-------+'
+ printf '# | %-4s   %-4s | CLUSTER: %-30s |\n' '***'  usa
+ echo '# +------+------+-------------------------+-------+-------+'
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n' '***' '***' sam-pingdirectory-0.usa 1636 8989
+ _ordinal=1
+ test 1 -lt 9
+ _pod=sam-pingdirectory-1.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 1 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-1.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-1.usa 1636 8989
+ _ordinal=2
+ test 2 -lt 9
+ _pod=sam-pingdirectory-2.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 2 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-2.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-2.usa 1636 8989
+ _ordinal=3
+ test 3 -lt 9
+ _pod=sam-pingdirectory-3.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 3 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-3.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-3.usa 1636 8989
+ _ordinal=4
+ test 4 -lt 9
+ _pod=sam-pingdirectory-4.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 4 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-4.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-4.usa 1636 8989
+ _ordinal=5
+ test 5 -lt 9
+ _pod=sam-pingdirectory-5.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 5 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-5.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-5.usa 1636 8989
+ _ordinal=6
+ test 6 -lt 9
+ _pod=sam-pingdirectory-6.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 6 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-6.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-6.usa 1636 8989
+ _ordinal=7
+ test 7 -lt 9
+ _pod=sam-pingdirectory-7.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 7 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-7.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-7.usa 1636 8989
+ _ordinal=8
+ test 8 -lt 9
+ _pod=sam-pingdirectory-8.usa
+ _seedIndicator=
+ test usa '=' usa
+ test 8 '=' 0
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-8.usa
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' usa
+ _prevCluster=usa
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-8.usa 1636 8989
+ _ordinal=9
+ test 9 -lt 9
+ _ordinal=0
+ test 0 -lt 9
+ _pod=sam-pingdirectory-0.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-0.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test usa '!=' aus
+ echo '# +------+------+-------------------------+-------+-------+'
+ printf '# | %-4s   %-4s | CLUSTER: %-30s |\n'   aus
+ echo '# +------+------+-------------------------+-------+-------+'
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-0.aus 1636 8989
+ _ordinal=1
+ test 1 -lt 9
+ _pod=sam-pingdirectory-1.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-1.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test aus '!=' aus
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-1.aus 1636 8989
+ _ordinal=2
+ test 2 -lt 9
+ _pod=sam-pingdirectory-2.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-2.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test aus '!=' aus
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-2.aus 1636 8989
+ _ordinal=3
+ test 3 -lt 9
+ _pod=sam-pingdirectory-3.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-3.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test aus '!=' aus
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-3.aus 1636 8989
+ _ordinal=4
+ test 4 -lt 9
+ _pod=sam-pingdirectory-4.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-4.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
#
    #         K8S_STATEFUL_SET_NAME: sam-pingdirectory
    # K8S_STATEFUL_SET_SERVICE_NAME: sam-pingdirectory-cluster
    #
    #                  K8S_CLUSTERS: usa aus  (multi cluster)
    #                   K8S_CLUSTER: usa
    #              K8S_SEED_CLUSTER: usa
    #              K8S_NUM_REPLICAS: 9
    #       K8S_POD_HOSTNAME_PREFIX: sam-pingdirectory-
    #       K8S_POD_HOSTNAME_SUFFIX: .usa.internal.ping-cluster.com
    #      K8S_SEED_HOSTNAME_SUFFIX: .usa.internal.ping-cluster.com
    #           K8S_INCREMENT_PORTS: false (K8S_INCREMENT_PORTS not used ==> Using same ports for all instances - LDAPS_PORT (1636), REPLICATION_PORT (8989))
    #
    #
    #     Startup Plan
    #        - manage-profile setup
    #        - repl enable (from SEED Server-sam-pingdirectory-0.usa)
    #        - repl init   (from topology.json, from SEED Server-sam-pingdirectory-0.usa)
    ###################################################################################
    #
    # POD Server Information
    #                 instance name: sam-pingdirectory-0.usa
    #                      hostname: sam-pingdirectory-0.usa.internal.ping-cluster.com
    #                      location: usa
    #                    ldaps port: 1636
    #              replication port: 8989
    #
    # SEED Server Information
    #                 instance name: sam-pingdirectory-0.usa
    #                      hostname: sam-pingdirectory-0.usa.internal.ping-cluster.com
    #                      location: usa
+ _replicationPort=8989
+ test false '=' true
    #                    ldaps port: 1636
    #              replication port: 8989
    ###################################################################################
    
# +------+------+-------------------------+-------+-------+
# | SEED | POD  | Instance                | LDAPS | REPL  |
# +------+------+-------------------------+-------+-------+
# | ***         | CLUSTER: usa                            |
# +------+------+-------------------------+-------+-------+
# | ***  | ***  | sam-pingdirectory-0.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-1.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-2.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-3.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-4.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-5.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-6.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-7.usa | 1636  | 8989  |
# |      |      | sam-pingdirectory-8.usa | 1636  | 8989  |
# +------+------+-------------------------+-------+-------+
# |             | CLUSTER: aus                            |
# +------+------+-------------------------+-------+-------+
+ test aus '!=' aus
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-4.aus 1636 8989
+ _ordinal=5
+ test 5 -lt 9
+ _pod=sam-pingdirectory-5.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-5.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test aus '!=' aus
+ _prevCluster=aus
# |      |      | sam-pingdirectory-0.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-1.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-2.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-3.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-4.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-5.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-6.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-7.aus | 1636  | 8989  |
# |      |      | sam-pingdirectory-8.aus | 1636  | 8989  |
# +------+------+-------------------------+-------+-------+
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-5.aus 1636 8989
+ _ordinal=6
+ test 6 -lt 9
+ _pod=sam-pingdirectory-6.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-6.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test aus '!=' aus
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-6.aus 1636 8989
+ _ordinal=7
+ test 7 -lt 9
+ _pod=sam-pingdirectory-7.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-7.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test aus '!=' aus
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-7.aus 1636 8989
+ _ordinal=8
+ test 8 -lt 9
+ _pod=sam-pingdirectory-8.aus
+ _seedIndicator=
+ test aus '=' usa
+ _podIndicator=
+ test sam-pingdirectory-0.usa '=' sam-pingdirectory-8.aus
+ _ldapsPort=1636
+ test PingDirectory '=' PingDirectory
+ _replicationPort=8989
+ test false '=' true
+ test aus '!=' aus
+ _prevCluster=aus
+ test PingDirectory '=' PingDirectory
+ printf '# | %-4s | %-4s | %-23s | %-5s | %-5s |\n'   sam-pingdirectory-8.aus 1636 8989
+ _ordinal=9
+ test 9 -lt 9
+ echo '# +------+------+-------------------------+-------+-------+'
+ cat /tmp/tmp.KmNhAk
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ LOCATION=usa
+ echo sam-pingdirectory-0.usa
+ export_container_env ORCHESTRATION_TYPE RUN_PLAN PD_STATE INSTANCE_NAME
+ echo 
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables set by hook /opt/staging/hooks/03-build-run-plan.sh'
+ echo_bar
+ printf '################################################################################\n'
+ test -n ORCHESTRATION_TYPE
+ _var=ORCHESTRATION_TYPE
+ shift
+ get_value ORCHESTRATION_TYPE
+ IFS='%%'
+ eval printf '%s' '${ORCHESTRATION_TYPE}'
+ printf '%s' KUBERNETES
+ value=KUBERNETES
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z KUBERNETES
+ printf '%s' KUBERNETES
+ unset IFS
+ _val=KUBERNETES
+ echo 'ORCHESTRATION_TYPE=KUBERNETES'
+ test -n RUN_PLAN
+ _var=RUN_PLAN
+ shift
+ get_value RUN_PLAN
+ IFS='%%'
+ eval printf '%s' '${RUN_PLAN}'
+ printf '%s' START
+ value=START
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z START
+ printf '%s' START
+ unset IFS
+ _val=START
+ echo 'RUN_PLAN=START'
+ test -n PD_STATE
+ _var=PD_STATE
+ shift
+ get_value PD_STATE
+ IFS='%%'
+ eval printf '%s' '${PD_STATE}'
+ printf '%s' SETUP
+ value=SETUP
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z SETUP
+ printf '%s' SETUP
+ unset IFS
+ _val=SETUP
+ echo 'PD_STATE=SETUP'
+ test -n INSTANCE_NAME
+ _var=INSTANCE_NAME
+ shift
+ get_value INSTANCE_NAME
+ IFS='%%'
+ eval printf '%s' '${INSTANCE_NAME}'
+ printf '%s' sam-pingdirectory-0.usa
+ value=sam-pingdirectory-0.usa
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z sam-pingdirectory-0.usa
+ printf '%s' sam-pingdirectory-0.usa
+ unset IFS
+ _val=sam-pingdirectory-0.usa
+ echo 'INSTANCE_NAME=sam-pingdirectory-0.usa'
+ test -n 
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ set +o allexport
+ export_container_env _podInstanceName POD_HOSTNAME _podLocation POD_LDAPS_PORT
+ echo 
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables set by hook /opt/staging/hooks/03-build-run-plan.sh'
+ echo_bar
+ printf '################################################################################\n'
+ test -n _podInstanceName
+ _var=_podInstanceName
+ shift
+ get_value _podInstanceName
+ IFS='%%'
+ eval printf '%s' '${_podInstanceName}'
+ printf '%s' sam-pingdirectory-0.usa
+ value=sam-pingdirectory-0.usa
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z sam-pingdirectory-0.usa
+ printf '%s' sam-pingdirectory-0.usa
+ unset IFS
+ _val=sam-pingdirectory-0.usa
+ echo '_podInstanceName=sam-pingdirectory-0.usa'
+ test -n POD_HOSTNAME
+ _var=POD_HOSTNAME
+ shift
+ get_value POD_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${POD_HOSTNAME}'
+ printf '%s' sam-pingdirectory-0.usa.internal.ping-cluster.com
+ value=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z sam-pingdirectory-0.usa.internal.ping-cluster.com
+ printf '%s' sam-pingdirectory-0.usa.internal.ping-cluster.com
+ unset IFS
+ _val=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ echo 'POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com'
+ test -n _podLocation
+ _var=_podLocation
+ shift
+ get_value _podLocation
+ IFS='%%'
+ eval printf '%s' '${_podLocation}'
+ printf '%s' usa
+ value=usa
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z usa
+ printf '%s' usa
+ unset IFS
+ _val=usa
+ echo '_podLocation=usa'
+ test -n POD_LDAPS_PORT
+ _var=POD_LDAPS_PORT
+ shift
+ get_value POD_LDAPS_PORT
+ IFS='%%'
+ eval printf '%s' '${POD_LDAPS_PORT}'
+ printf '%s' 1636
+ value=1636
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 1636
+ printf '%s' 1636
+ unset IFS
+ _val=1636
+ echo 'POD_LDAPS_PORT=1636'
+ test -n 
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ set +o allexport
+ test PingDirectory '=' PingDirectory
+ export_container_env _podReplicationPort
+ echo 
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables set by hook /opt/staging/hooks/03-build-run-plan.sh'
+ echo_bar
+ printf '################################################################################\n'
+ test -n _podReplicationPort
+ _var=_podReplicationPort
+ shift
+ get_value _podReplicationPort
+ IFS='%%'
+ eval printf '%s' '${_podReplicationPort}'
+ printf '%s' 8989
+ value=8989
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 8989
+ printf '%s' 8989
+ unset IFS
+ _val=8989
+ echo '_podReplicationPort=8989'
+ test -n 
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ set +o allexport
+ export_container_env _seedInstanceName SEED_HOSTNAME _seedLocation SEED_LDAPS_PORT
+ echo 
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables set by hook /opt/staging/hooks/03-build-run-plan.sh'
+ echo_bar
+ printf '################################################################################\n'
+ test -n _seedInstanceName
+ _var=_seedInstanceName
+ shift
+ get_value _seedInstanceName
+ IFS='%%'
+ eval printf '%s' '${_seedInstanceName}'
+ printf '%s' sam-pingdirectory-0.usa
+ value=sam-pingdirectory-0.usa
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z sam-pingdirectory-0.usa
+ printf '%s' sam-pingdirectory-0.usa
+ unset IFS
+ _val=sam-pingdirectory-0.usa
+ echo '_seedInstanceName=sam-pingdirectory-0.usa'
+ test -n SEED_HOSTNAME
+ _var=SEED_HOSTNAME
+ shift
+ get_value SEED_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${SEED_HOSTNAME}'
+ printf '%s' sam-pingdirectory-0.usa.internal.ping-cluster.com
+ value=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z sam-pingdirectory-0.usa.internal.ping-cluster.com
+ printf '%s' sam-pingdirectory-0.usa.internal.ping-cluster.com
+ unset IFS
+ _val=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ echo 'SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com'
+ test -n _seedLocation
+ _var=_seedLocation
+ shift
+ get_value _seedLocation
+ IFS='%%'
+ eval printf '%s' '${_seedLocation}'
+ printf '%s' usa
+ value=usa
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z usa
+ printf '%s' usa
+ unset IFS
+ _val=usa
+ echo '_seedLocation=usa'
+ test -n SEED_LDAPS_PORT
+ _var=SEED_LDAPS_PORT
+ shift
+ get_value SEED_LDAPS_PORT
+ IFS='%%'
+ eval printf '%s' '${SEED_LDAPS_PORT}'
+ printf '%s' 1636
+ value=1636
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 1636
+ printf '%s' 1636
+ unset IFS
+ _val=1636
+ echo 'SEED_LDAPS_PORT=1636'
+ test -n 
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ set +o allexport
+ test PingDirectory '=' PingDirectory
+ export_container_env _seedReplicationPort
+ echo 
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables set by hook /opt/staging/hooks/03-build-run-plan.sh'
+ echo_bar
+ printf '################################################################################\n'
+ test -n _seedReplicationPort
+ _var=_seedReplicationPort
+ shift
+ get_value _seedReplicationPort
+ IFS='%%'
+ eval printf '%s' '${_seedReplicationPort}'
+ printf '%s' 8989
+ value=8989
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 8989
+ printf '%s' 8989
+ unset IFS
+ _val=8989
+ echo '_seedReplicationPort=8989'
+ test -n 
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ set +o allexport
+ export_container_env LDAPS_PORT LOCATION
+ echo 
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables set by hook /opt/staging/hooks/03-build-run-plan.sh'
+ echo_bar
+ printf '################################################################################\n'
+ test -n LDAPS_PORT
+ _var=LDAPS_PORT
+ shift
+ get_value LDAPS_PORT
+ IFS='%%'
+ eval printf '%s' '${LDAPS_PORT}'
+ printf '%s' 1636
+ value=1636
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 1636
+ printf '%s' 1636
+ unset IFS
+ _val=1636
+ echo 'LDAPS_PORT=1636'
+ test -n LOCATION
+ _var=LOCATION
+ shift
+ get_value LOCATION
+ IFS='%%'
+ eval printf '%s' '${LOCATION}'
+ printf '%s' usa
+ value=usa
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z usa
+ printf '%s' usa
+ unset IFS
+ _val=usa
+ echo 'LOCATION=usa'
+ test -n 
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ set +o allexport
+ test PingDirectory '=' PingDirectory
+ export_container_env REPLICATION_PORT
+ echo 
+ echo_bar
+ printf '################################################################################\n'
+ echo '# Following variables set by hook /opt/staging/hooks/03-build-run-plan.sh'
+ echo_bar
+ printf '################################################################################\n'
+ test -n REPLICATION_PORT
+ _var=REPLICATION_PORT
+ shift
+ get_value REPLICATION_PORT
+ IFS='%%'
+ eval printf '%s' '${REPLICATION_PORT}'
+ printf '%s' 8989
+ value=8989
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 8989
+ printf '%s' 8989
+ unset IFS
+ _val=8989
+ echo 'REPLICATION_PORT=8989'
+ test -n 
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ rm -f '/tmp/tmp.KmNhAk /tmp/tmp.nNpjbf'
+ return 0
+ die_on_error 03 'Error running 03-build-run-plan.sh'
+ _errorCode=0
+ _exitCode=03
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/03-build-run-plan.sh.post
+ _runFile=/opt/staging/hooks/03-build-run-plan.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/03-build-run-plan.sh.post
+ echo 

+ die_on_error 03 'Error running 03-build-run-plan.sh.post'
+ _errorCode=0
+ _exitCode=03
+ shift
+ test 0 -ne 0
+ run_hook 04-check-variables.sh
+ _hookScript=04-check-variables.sh
+ echo 04-check-variables.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=04
+ test -z 04
+ run_if_present /opt/staging/hooks/04-check-variables.sh.pre
+ _runFile=/opt/staging/hooks/04-check-variables.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/04-check-variables.sh.pre
+ echo 
+ die_on_error 04 'Error running 04-check-variables.sh.pre'
+ _errorCode=0
+ _exitCode=04
+ shift

+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/04-check-variables.sh
+ _runFile=/opt/staging/hooks/04-check-variables.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/04-check-variables.sh
+ sh -x /opt/staging/hooks/04-check-variables.sh
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/04-check-variables.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/04-check-variables.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/04-check-variables.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/04-check-variables.sh' '\033[0m'
[0;32m----- Starting hook: /opt/staging/hooks/04-check-variables.sh[0m
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ print_variable_warnings
+ warn_deprecated_variables
+ _deprecatedVarsJson=/opt/staging/deprecated-variables.json
+ test -f /opt/staging/deprecated-variables.json
+ _deprecatedHeaderPrinted=false
+ jq -r '.[] | .name' /opt/staging/deprecated-variables.json
+ get_value DOLLAR
+ IFS='%%'
+ eval printf '%s' '${DOLLAR}'
+ printf '%s' '$'
+ value='$'
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z '$'
+ printf '%s' '$'
+ unset IFS
+ _deprecatedValue='$'
+ test -n '$'
+ test false '!=' true
+ echo_yellow '################################################################################'
+ echo_color yellow '################################################################################'
+ toLower yellow
+ printf '%s' yellow
+ tr '[:upper:]' '[:lower:]'
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
[0;33m################################################################################[0m
+ printf '%b%s%b\n' '\033[0;33m' '################################################################################' '\033[0m'
+ echo_yellow '################################################################################'
+ echo_color yellow '################################################################################'
+ toLower yellow
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' yellow
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m' '################################################################################' '\033[0m'
+ echo_yellow '###################### WARNING - DEPRECATED VARIABLES ##########################'
+ echo_color yellow '###################### WARNING - DEPRECATED VARIABLES ##########################'
+ toLower yellow
[0;33m################################################################################[0m
+ printf '%s' yellow
+ tr '[:upper:]' '[:lower:]'
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m' '###################### WARNING - DEPRECATED VARIABLES ##########################' '\033[0m'
[0;33m###################### WARNING - DEPRECATED VARIABLES ##########################[0m
+ echo_yellow '#  The following deprecated variables were found. These variables may be removed'
+ echo_color yellow '#  The following deprecated variables were found. These variables may be removed'
+ toLower yellow
+ printf '%s' yellow
+ tr '[:upper:]' '[:lower:]'
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m' '#  The following deprecated variables were found. These variables may be removed' '\033[0m'
[0;33m#  The following deprecated variables were found. These variables may be removed[0m
+ echo_yellow '#  in a future release.'
+ echo_color yellow '#  in a future release.'
+ toLower yellow
+ printf '%s' yellow
+ tr '[:upper:]' '[:lower:]'
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m' '#  in a future release.' '\033[0m'
+ echo_yellow 
+ echo_color yellow 
[0;33m#  in a future release.[0m
+ toLower yellow
+ printf '%s' yellow
+ tr '[:upper:]' '[:lower:]'
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
[0;33m[0m
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m'  '\033[0m'
+ _deprecatedHeaderPrinted=true
+ jq -r '.[] | select(.name=="DOLLAR") | .sensitive' /opt/staging/deprecated-variables.json
+ _sensitive=false
+ test false '=' true
+ _redactAll=false
+ echo_vars DOLLAR
+ test -n DOLLAR
+ _var=DOLLAR
+ shift
+ get_value DOLLAR
+ IFS='%%'
+ eval printf '%s' '${DOLLAR}'
+ printf '%s' '$'
+ value='$'
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z '$'
+ printf '%s' '$'
+ unset IFS
+ _val='$'
+ grep -e '^DOLLAR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=DOLLAR_REDACT
+ get_value DOLLAR_REDACT
+ IFS='%%'
+ eval printf '%s' '${DOLLAR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' DOLLAR '$' 
                            DOLLAR : $ 
+ _varValidation=DOLLAR_VALIDATION
+ get_value DOLLAR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${DOLLAR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ jq -r '.[] | select(.name=="DOLLAR") | .message' /opt/staging/deprecated-variables.json
+ _deprecatedVarMessage=null
+ test -n null
+ test null '!=' null
+ get_value PA_ADMIN_PASSWORD
+ IFS='%%'
+ eval printf '%s' '${PA_ADMIN_PASSWORD}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _deprecatedValue=
+ test -n 
+ get_value REST_API_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${REST_API_HOSTNAME}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _deprecatedValue=
+ test -n 
+ test true '=' true
+ echo_yellow 
+ echo_color yellow 
+ toLower yellow
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' yellow
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
[0;33m[0m
+ printf '%b%s%b\n' '\033[0;33m'  '\033[0m'
+ echo_yellow '################################################################################'
+ echo_color yellow '################################################################################'
+ toLower yellow
+ tr+  '[:upper:]' '[:lower:]'
printf '%s' yellow
[0;33m################################################################################[0m
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m' '################################################################################' '\033[0m'
+ echo_yellow 
+ echo_color yellow 
+ toLower yellow
+ printf '%s' yellow
+ tr '[:upper:]' '[:lower:]'
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m'  '\033[0m'
+ _redactAll=false
+ warn_unsafe_variables
[0;33m[0m
+ awk '-F=' '{ print $2 }'
+ grep ^UNSAFE_
+ env
################################################################################
#    Docker Image Information
################################################################################
+ _unsafeValues=
+ test -n 
+ _validationFailed=false
+ echo_header 'Docker Image Information'
+ echo_bar
+ printf '################################################################################\n'
+ test -n 'Docker Image Information'
+ _msg='Docker Image Information'
+ shift
+ echo '#    Docker Image Information'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars IMAGE_VERSION IMAGE_GIT_REV HOST_NAME DOMAIN_NAME
+ test -n IMAGE_VERSION
+ _var=IMAGE_VERSION
+ shift
+ get_value IMAGE_VERSION
+ IFS='%%'
+ eval printf '%s' '${IMAGE_VERSION}'
+ printf '%s' pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
+ value=pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
+ printf '%s' pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
+ unset IFS
+ _val=pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
+ grep -e '^IMAGE_VERSION=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=IMAGE_VERSION_REDACT
+ get_value IMAGE_VERSION_REDACT
+ IFS='%%'
+ eval printf '%s' '${IMAGE_VERSION_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' IMAGE_VERSION pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af 
+ _varValidation=IMAGE_VERSION_VALIDATION
                     IMAGE_VERSION : pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af 
+ get_value IMAGE_VERSION_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${IMAGE_VERSION_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n IMAGE_GIT_REV
+ _var=IMAGE_GIT_REV
+ shift
+ get_value IMAGE_GIT_REV
+ IFS='%%'
+ eval printf '%s' '${IMAGE_GIT_REV}'
+ printf '%s' 60afc5136eadba04ab321c00a269f068322cefa0
+ value=60afc5136eadba04ab321c00a269f068322cefa0
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 60afc5136eadba04ab321c00a269f068322cefa0
+ printf '%s' 60afc5136eadba04ab321c00a269f068322cefa0
+ unset IFS
+ _val=60afc5136eadba04ab321c00a269f068322cefa0
+ grep -e '^IMAGE_GIT_REV=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=IMAGE_GIT_REV_REDACT
+ get_value IMAGE_GIT_REV_REDACT
+ IFS='%%'
+ eval printf '%s' '${IMAGE_GIT_REV_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
                     IMAGE_GIT_REV : 60afc5136eadba04ab321c00a269f068322cefa0 
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' IMAGE_GIT_REV 60afc5136eadba04ab321c00a269f068322cefa0 
+ _varValidation=IMAGE_GIT_REV_VALIDATION
+ get_value IMAGE_GIT_REV_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${IMAGE_GIT_REV_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n HOST_NAME
+ _var=HOST_NAME
+ shift
+ get_value HOST_NAME
+ IFS='%%'
+ eval printf '%s' '${HOST_NAME}'
+ printf '%s' sam-pingdirectory-0
+ value=sam-pingdirectory-0
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z sam-pingdirectory-0
+ printf '%s' sam-pingdirectory-0
+ unset IFS
+ _val=sam-pingdirectory-0
+ grep -e '^HOST_NAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=HOST_NAME_REDACT
+ get_value HOST_NAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${HOST_NAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' HOST_NAME sam-pingdirectory-0 
+ _varValidation=HOST_NAME_VALIDATION
                         HOST_NAME : sam-pingdirectory-0 
+ get_value HOST_NAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${HOST_NAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]'+  '[:lower:]'
printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n DOMAIN_NAME
+ _var=DOMAIN_NAME
+ shift
+ get_value DOMAIN_NAME
+ IFS='%%'
+ eval printf '%s' '${DOMAIN_NAME}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _val=
+ grep -e '^DOMAIN_NAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=DOMAIN_NAME_REDACT
+ get_value DOMAIN_NAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${DOMAIN_NAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' DOMAIN_NAME '--- empty ---' 
+ _varValidation=DOMAIN_NAME_VALIDATION
+ get_value DOMAIN_NAME_VALIDATION
                       DOMAIN_NAME : --- empty --- 
+ IFS='%%'
+ eval printf '%s' '${DOMAIN_NAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'Directory Variables'
+ echo_bar
+ printf '################################################################################\n'
+ test -n 'Directory Variables'
+ _msg='Directory Variables'
+ shift
+ echo '#    Directory Variables'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars BASE IN_DIR OUT_DIR SERVER_ROOT_DIR STAGING_DIR HOOKS_DIR SERVER_PROFILE_DIR BAK_DIR LOGS_DIR SECRETS_DIR LICENSE_DIR
+ test -n BASE
+ _var=BASE
+ shift
+ get_value BASE
+ IFS='%%'
################################################################################
#    Directory Variables
################################################################################
+ eval printf '%s' '${BASE}'
+ printf '%s' /opt
+ value=/opt
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z /opt
+ printf '%s' /opt
+ unset IFS
+ _val=/opt
+ grep -e '^BASE=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=BASE_REDACT
+ get_value BASE_REDACT
+ IFS='%%'
+ eval printf '%s' '${BASE_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' BASE /opt 
+ _varValidation=BASE_VALIDATION
                              BASE : /opt 
+ get_value BASE_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${BASE_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n IN_DIR
+ _var=IN_DIR
+ shift
+ get_value IN_DIR
+ IFS='%%'
+ eval printf '%s' '${IN_DIR}'
+ printf '%s' /opt/in
+ value=/opt/in
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z /opt/in
+ printf '%s' /opt/in
+ unset IFS
+ _val=/opt/in
+ grep -e '^IN_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=IN_DIR_REDACT
+ get_value IN_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${IN_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
                            IN_DIR : /opt/in 
+ printf '    %30s : %s %s\n' IN_DIR /opt/in 
+ _varValidation=IN_DIR_VALIDATION
+ get_value IN_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${IN_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n OUT_DIR
+ _var=OUT_DIR
+ shift
+ get_value OUT_DIR
+ IFS='%%'
+ eval printf '%s' '${OUT_DIR}'
+ printf '%s' /opt/out
+ value=/opt/out
+ toLower 
+ + tr '[:upper:]'printf '[:lower:]' '%s'
 
+ checkFile=
+ test -z /opt/out
+ printf '%s' /opt/out
+ unset IFS
+ _val=/opt/out
+ grep -e '^OUT_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=OUT_DIR_REDACT
+ get_value OUT_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${OUT_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' OUT_DIR /opt/out 
+ _varValidation=OUT_DIR_VALIDATION
                           OUT_DIR : /opt/out 
+ get_value OUT_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${OUT_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n SERVER_ROOT_DIR
+ _var=SERVER_ROOT_DIR
+ shift
+ get_value SERVER_ROOT_DIR
+ IFS='%%'
+ eval printf '%s' '${SERVER_ROOT_DIR}'
+ printf '%s' /opt/out/instance
+ value=/opt/out/instance
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z /opt/out/instance
+ printf '%s' /opt/out/instance
+ unset IFS
+ _val=/opt/out/instance
+ grep -e '^SERVER_ROOT_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SERVER_ROOT_DIR_REDACT
+ get_value SERVER_ROOT_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${SERVER_ROOT_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
                   SERVER_ROOT_DIR : /opt/out/instance 
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' SERVER_ROOT_DIR /opt/out/instance 
+ _varValidation=SERVER_ROOT_DIR_VALIDATION
+ get_value SERVER_ROOT_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SERVER_ROOT_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n STAGING_DIR
+ _var=STAGING_DIR
+ shift
+ get_value STAGING_DIR
+ IFS='%%'
+ eval printf '%s' '${STAGING_DIR}'
+ printf '%s' /opt/staging
+ value=/opt/staging
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z /opt/staging
+ printf '%s' /opt/staging
+ unset IFS
+ _val=/opt/staging
+ grep -e '^STAGING_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=STAGING_DIR_REDACT
+ get_value STAGING_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${STAGING_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' STAGING_DIR /opt/staging 
+ _varValidation=STAGING_DIR_VALIDATION
                       STAGING_DIR : /opt/staging 
+ get_value STAGING_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${STAGING_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n HOOKS_DIR
+ _var=HOOKS_DIR
+ shift
+ get_value HOOKS_DIR
+ IFS='%%'
+ eval printf '%s' '${HOOKS_DIR}'
+ printf '%s' /opt/staging/hooks
+ value=/opt/staging/hooks
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z /opt/staging/hooks
+ printf '%s' /opt/staging/hooks
+ unset IFS
+ _val=/opt/staging/hooks
+ grep -e '^HOOKS_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
                         HOOKS_DIR : /opt/staging/hooks 
+ _varRedact=HOOKS_DIR_REDACT
+ get_value HOOKS_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${HOOKS_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' HOOKS_DIR /opt/staging/hooks 
+ _varValidation=HOOKS_DIR_VALIDATION
+ get_value HOOKS_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${HOOKS_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n SERVER_PROFILE_DIR
+ _var=SERVER_PROFILE_DIR
+ shift
+ get_value SERVER_PROFILE_DIR
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_DIR}'
+ printf '%s' /tmp/server-profile
+ value=/tmp/server-profile
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z /tmp/server-profile
+ printf '%s' /tmp/server-profile
+ unset IFS
+ _val=/tmp/server-profile
+ grep -e '^SERVER_PROFILE_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SERVER_PROFILE_DIR_REDACT
+ get_value SERVER_PROFILE_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' SERVER_PROFILE_DIR /tmp/server-profile 
                SERVER_PROFILE_DIR : /tmp/server-profile 
+ _varValidation=SERVER_PROFILE_DIR_VALIDATION
+ get_value SERVER_PROFILE_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n BAK_DIR
+ _var=BAK_DIR
+ shift
+ get_value BAK_DIR
+ IFS='%%'
+ eval printf '%s' '${BAK_DIR}'
+ printf '%s' /opt/backup
+ value=/opt/backup
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z /opt/backup
+ printf '%s' /opt/backup
+ unset IFS
+ _val=/opt/backup
+ grep -e '^BAK_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=BAK_DIR_REDACT
+ get_value BAK_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${BAK_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
                           BAK_DIR : /opt/backup 
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' BAK_DIR /opt/backup 
+ _varValidation=BAK_DIR_VALIDATION
+ get_value BAK_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${BAK_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n LOGS_DIR
+ _var=LOGS_DIR
+ shift
+ get_value LOGS_DIR
+ IFS='%%'
+ eval printf '%s' '${LOGS_DIR}'
+ printf '%s' /opt/logs
+ value=/opt/logs
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z /opt/logs
+ printf '%s' /opt/logs
+ unset IFS
+ _val=/opt/logs
+ grep -e '^LOGS_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LOGS_DIR_REDACT
+ get_value LOGS_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${LOGS_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
                          LOGS_DIR : /opt/logs 
+ test false '=' true
+ printf '    %30s : %s %s\n' LOGS_DIR /opt/logs 
+ _varValidation=LOGS_DIR_VALIDATION
+ get_value LOGS_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LOGS_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n SECRETS_DIR
+ _var=SECRETS_DIR
+ shift
+ get_value SECRETS_DIR
+ IFS='%%'
+ eval printf '%s' '${SECRETS_DIR}'
+ printf '%s' /run/secrets
+ value=/run/secrets
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z /run/secrets
+ printf '%s' /run/secrets
+ unset IFS
+ _val=/run/secrets
+ grep -e '^SECRETS_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SECRETS_DIR_REDACT
+ get_value SECRETS_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${SECRETS_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' SECRETS_DIR /run/secrets 
                       SECRETS_DIR : /run/secrets 
+ _varValidation=SECRETS_DIR_VALIDATION
+ get_value SECRETS_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SECRETS_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n LICENSE_DIR
+ _var=LICENSE_DIR
+ shift
+ get_value LICENSE_DIR
+ IFS='%%'
+ eval printf '%s' '${LICENSE_DIR}'
+ printf '%s' /opt/out/instance
+ value=/opt/out/instance
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z /opt/out/instance
+ printf '%s' /opt/out/instance
+ unset IFS
+ _val=/opt/out/instance
+ grep -e '^LICENSE_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LICENSE_DIR_REDACT
+ get_value LICENSE_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${LICENSE_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' LICENSE_DIR /opt/out/instance 
+ _varValidation=LICENSE_DIR_VALIDATION
                       LICENSE_DIR : /opt/out/instance 
+ get_value LICENSE_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LICENSE_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
################################################################################
#    File Variables
################################################################################
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'File Variables'
+ echo_bar
+ printf '################################################################################\n'
+ test -n 'File Variables'
+ _msg='File Variables'
+ shift
+ echo '#    File Variables'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars TOPOLOGY_FILE TAIL_LOG_FILES COLORIZE_LOGS
+ test -n TOPOLOGY_FILE
+ _var=TOPOLOGY_FILE
+ shift
+ get_value TOPOLOGY_FILE
+ IFS='%%'
+ eval printf '%s' '${TOPOLOGY_FILE}'
+ printf '%s' /opt/staging/topology.json
+ value=/opt/staging/topology.json
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z /opt/staging/topology.json
+ printf '%s' /opt/staging/topology.json
+ unset IFS
+ _val=/opt/staging/topology.json
+ grep -e '^TOPOLOGY_FILE=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=TOPOLOGY_FILE_REDACT
+ get_value TOPOLOGY_FILE_REDACT
+ IFS='%%'
+ eval printf '%s' '${TOPOLOGY_FILE_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' TOPOLOGY_FILE /opt/staging/topology.json 
                     TOPOLOGY_FILE : /opt/staging/topology.json 
+ _varValidation=TOPOLOGY_FILE_VALIDATION
+ get_value TOPOLOGY_FILE_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${TOPOLOGY_FILE_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n TAIL_LOG_FILES
+ _var=TAIL_LOG_FILES
+ shift
+ get_value TAIL_LOG_FILES
+ IFS='%%'
+ eval printf '%s' '${TAIL_LOG_FILES}'
+ printf '%s' '/opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/debug-trace /opt/out/instance/logs/debug-aci /opt/out/instance/logs/tools/*.log* /opt/server/logs/tools/*.log* '
+ value='/opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/debug-trace /opt/out/instance/logs/debug-aci /opt/out/instance/logs/tools/*.log* /opt/server/logs/tools/*.log* '
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z '/opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/debug-trace /opt/out/instance/logs/debug-aci /opt/out/instance/logs/tools/*.log* /opt/server/logs/tools/*.log* '
+ printf '%s' '/opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/debug-trace /opt/out/instance/logs/debug-aci /opt/out/instance/logs/tools/*.log* /opt/server/logs/tools/*.log* '
+ unset IFS
+ _val='/opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/debug-trace /opt/out/instance/logs/debug-aci /opt/out/instance/logs/tools/*.log* /opt/server/logs/tools/*.log* '
+ grep -e '^TAIL_LOG_FILES=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=TAIL_LOG_FILES_REDACT
+ get_value TAIL_LOG_FILES_REDACT
+ IFS='%%'
+ eval printf '%s' '${TAIL_LOG_FILES_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
                    TAIL_LOG_FILES : /opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/debug-trace /opt/out/instance/logs/debug-aci /opt/out/instance/logs/tools/*.log* /opt/server/logs/tools/*.log*  
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' TAIL_LOG_FILES '/opt/out/instance/logs/access /opt/out/instance/logs/errors /opt/out/instance/logs/failed-ops /opt/out/instance/logs/config-audit.log /opt/out/instance/logs/debug-trace /opt/out/instance/logs/debug-aci /opt/out/instance/logs/tools/*.log* /opt/server/logs/tools/*.log* ' 
+ _varValidation=TAIL_LOG_FILES_VALIDATION
+ get_value TAIL_LOG_FILES_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${TAIL_LOG_FILES_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ + tr '[:upper:]'printf '%s' 
 '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n COLORIZE_LOGS
+ _var=COLORIZE_LOGS
+ shift
+ get_value COLORIZE_LOGS
+ IFS='%%'
+ eval printf '%s' '${COLORIZE_LOGS}'
+ printf '%s' true
+ value=true
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z true
+ printf '%s' true
+ unset IFS
+ _val=true
+ grep -e '^COLORIZE_LOGS=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=COLORIZE_LOGS_REDACT
+ get_value COLORIZE_LOGS_REDACT
+ IFS='%%'
+ eval printf '%s' '${COLORIZE_LOGS_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' COLORIZE_LOGS true 
+ _varValidation=COLORIZE_LOGS_VALIDATION
                     COLORIZE_LOGS : true 
+ get_value COLORIZE_LOGS_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${COLORIZE_LOGS_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
################################################################################
#    Server Profile
################################################################################
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'Server Profile'
+ echo_bar
+ printf '################################################################################\n'
+ test -n 'Server Profile'
+ _msg='Server Profile'
+ shift
+ echo '#    Server Profile'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars SERVER_PROFILE_URL SERVER_PROFILE_BRANCH SERVER_PROFILE_PATH SERVER_PROFILE_UPDATE
+ test -n SERVER_PROFILE_URL
+ _var=SERVER_PROFILE_URL
+ shift
+ get_value SERVER_PROFILE_URL
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_URL}'
+ printf '%s' https://github.com/pingidentity/pingidentity-server-profiles.git
+ value=https://github.com/pingidentity/pingidentity-server-profiles.git
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z https://github.com/pingidentity/pingidentity-server-profiles.git
+ printf '%s' https://github.com/pingidentity/pingidentity-server-profiles.git
+ unset IFS
+ _val=https://github.com/pingidentity/pingidentity-server-profiles.git
+ grep -e '^SERVER_PROFILE_URL=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SERVER_PROFILE_URL_REDACT
+ get_value SERVER_PROFILE_URL_REDACT
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_URL_REDACT}'
+ printf '%s' true
+ value=true
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z true
+ printf '%s' true
+ unset IFS
+ _varRedact=true
+ test true '=' true
+ _val='*** REDACTED ***'
+ printf '    %30s : %s %s\n' SERVER_PROFILE_URL '*** REDACTED ***' 
+ _varValidation=SERVER_PROFILE_URL_VALIDATION
                SERVER_PROFILE_URL : *** REDACTED *** 
+ get_value SERVER_PROFILE_URL_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_URL_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n SERVER_PROFILE_BRANCH
+ _var=SERVER_PROFILE_BRANCH
+ shift
+ get_value SERVER_PROFILE_BRANCH
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_BRANCH}'
+ printf '%s' GDO-931
+ value=GDO-931
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z GDO-931
+ printf '%s' GDO-931
+ unset IFS
+ _val=GDO-931
+ grep -e '^SERVER_PROFILE_BRANCH=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SERVER_PROFILE_BRANCH_REDACT
+ get_value SERVER_PROFILE_BRANCH_REDACT
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_BRANCH_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' SERVER_PROFILE_BRANCH GDO-931 
+ _varValidation=SERVER_PROFILE_BRANCH_VALIDATION
             SERVER_PROFILE_BRANCH : GDO-931 
+ get_value SERVER_PROFILE_BRANCH_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_BRANCH_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ + trprintf '[:upper:]' '%s' '[:lower:]' 

+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n SERVER_PROFILE_PATH
+ _var=SERVER_PROFILE_PATH
+ shift
+ get_value SERVER_PROFILE_PATH
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_PATH}'
+ printf '%s' baseline/pingdirectory
+ value=baseline/pingdirectory
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z baseline/pingdirectory
+ printf '%s' baseline/pingdirectory
+ unset IFS
+ _val=baseline/pingdirectory
+ grep -e '^SERVER_PROFILE_PATH=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SERVER_PROFILE_PATH_REDACT
+ get_value SERVER_PROFILE_PATH_REDACT
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_PATH_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ + tr '[:upper:]'printf '[:lower:]' '%s'
 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' SERVER_PROFILE_PATH baseline/pingdirectory 
+ _varValidation=SERVER_PROFILE_PATH_VALIDATION
+ get_value SERVER_PROFILE_PATH_VALIDATION
+ IFS='%%'
               SERVER_PROFILE_PATH : baseline/pingdirectory 
+ eval printf '%s' '${SERVER_PROFILE_PATH_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n SERVER_PROFILE_UPDATE
+ _var=SERVER_PROFILE_UPDATE
+ shift
+ get_value SERVER_PROFILE_UPDATE
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_UPDATE}'
+ printf '%s' false
+ value=false
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z false
+ printf '%s' false
+ unset IFS
+ _val=false
+ grep -e '^SERVER_PROFILE_UPDATE=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SERVER_PROFILE_UPDATE_REDACT
+ get_value SERVER_PROFILE_UPDATE_REDACT
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_UPDATE_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' SERVER_PROFILE_UPDATE false 
             SERVER_PROFILE_UPDATE : false 
+ _varValidation=SERVER_PROFILE_UPDATE_VALIDATION
+ get_value SERVER_PROFILE_UPDATE_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SERVER_PROFILE_UPDATE_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'Security Checks'
+ echo_bar
+ printf '################################################################################\n'
################################################################################
+ test -n 'Security Checks'
+ _msg='Security Checks'
+ shift
#    Security Checks
+ echo '#    Security Checks'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars SECRUITY_CHECKS_STRICT SECURITY_CHECKS_FILENAME
+ test -n SECRUITY_CHECKS_STRICT
################################################################################
+ _var=SECRUITY_CHECKS_STRICT
+ shift
+ get_value SECRUITY_CHECKS_STRICT
+ IFS='%%'
+ eval printf '%s' '${SECRUITY_CHECKS_STRICT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _val=
+ grep -e '^SECRUITY_CHECKS_STRICT=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SECRUITY_CHECKS_STRICT_REDACT
+ get_value SECRUITY_CHECKS_STRICT_REDACT
+ IFS='%%'
+ eval printf '%s' '${SECRUITY_CHECKS_STRICT_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' SECRUITY_CHECKS_STRICT '--- empty ---' 
+ _varValidation=SECRUITY_CHECKS_STRICT_VALIDATION
            SECRUITY_CHECKS_STRICT : --- empty --- 
+ get_value SECRUITY_CHECKS_STRICT_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SECRUITY_CHECKS_STRICT_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n SECURITY_CHECKS_FILENAME
+ _var=SECURITY_CHECKS_FILENAME
+ shift
+ get_value SECURITY_CHECKS_FILENAME
+ IFS='%%'
+ eval printf '%s' '${SECURITY_CHECKS_FILENAME}'
+ printf '%s' '*.jwk *.pin'
+ value='*.jwk *.pin'
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z '*.jwk *.pin'
+ printf '%s' '*.jwk *.pin'
+ unset IFS
+ _val='*.jwk *.pin'
+ grep -e '^SECURITY_CHECKS_FILENAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=SECURITY_CHECKS_FILENAME_REDACT
+ get_value SECURITY_CHECKS_FILENAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${SECURITY_CHECKS_FILENAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
          SECURITY_CHECKS_FILENAME : *.jwk *.pin 
+ test false '=' true
+ printf '    %30s : %s %s\n' SECURITY_CHECKS_FILENAME '*.jwk *.pin' 
+ _varValidation=SECURITY_CHECKS_FILENAME_VALIDATION
+ get_value SECURITY_CHECKS_FILENAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${SECURITY_CHECKS_FILENAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ test -n 
+ echo_header 'DevOps User/Key'
+ echo_bar
+ printf '################################################################################\n'
################################################################################
+ test -n 'DevOps User/Key'
+ _msg='DevOps User/Key'
+ shift
+ echo '#    DevOps User/Key'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
#    DevOps User/Key
################################################################################
+ echo_vars PING_IDENTITY_DEVOPS_USER PING_IDENTITY_DEVOPS_KEY
+ test -n PING_IDENTITY_DEVOPS_USER
+ _var=PING_IDENTITY_DEVOPS_USER
+ shift
+ get_value PING_IDENTITY_DEVOPS_USER
+ IFS='%%'
+ eval printf '%s' '${PING_IDENTITY_DEVOPS_USER}'
+ printf '%s' samirgandhi@pingidentity.com
+ value=samirgandhi@pingidentity.com
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z samirgandhi@pingidentity.com
+ printf '%s' samirgandhi@pingidentity.com
+ unset IFS
+ _val=samirgandhi@pingidentity.com
+ grep -e '^PING_IDENTITY_DEVOPS_USER=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PING_IDENTITY_DEVOPS_USER_REDACT
+ get_value PING_IDENTITY_DEVOPS_USER_REDACT
+ IFS='%%'
+ eval printf '%s' '${PING_IDENTITY_DEVOPS_USER_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PING_IDENTITY_DEVOPS_USER samirgandhi@pingidentity.com 
+ _varValidation=PING_IDENTITY_DEVOPS_USER_VALIDATION
         PING_IDENTITY_DEVOPS_USER : samirgandhi@pingidentity.com 
+ get_value PING_IDENTITY_DEVOPS_USER_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PING_IDENTITY_DEVOPS_USER_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n PING_IDENTITY_DEVOPS_KEY
+ _var=PING_IDENTITY_DEVOPS_KEY
+ shift
+ get_value PING_IDENTITY_DEVOPS_KEY
+ IFS='%%'
+ eval printf '%s' '${PING_IDENTITY_DEVOPS_KEY}'
+ printf '%s' 273b82bc-5d25-4a43-a163-099f313564ea
+ value=273b82bc-5d25-4a43-a163-099f313564ea
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 273b82bc-5d25-4a43-a163-099f313564ea
+ printf '%s' 273b82bc-5d25-4a43-a163-099f313564ea
+ unset IFS
+ _val=273b82bc-5d25-4a43-a163-099f313564ea
+ grep -e '^PING_IDENTITY_DEVOPS_KEY=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PING_IDENTITY_DEVOPS_KEY_REDACT
+ get_value PING_IDENTITY_DEVOPS_KEY_REDACT
+ IFS='%%'
+ eval printf '%s' '${PING_IDENTITY_DEVOPS_KEY_REDACT}'
+ printf '%s' true
+ value=true
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z true
+ printf '%s' true
+ unset IFS
+ _varRedact=true
+ test true '=' true
+ _val='*** REDACTED ***'
          PING_IDENTITY_DEVOPS_KEY : *** REDACTED *** 
+ printf '    %30s : %s %s\n' PING_IDENTITY_DEVOPS_KEY '*** REDACTED ***' 
+ _varValidation=PING_IDENTITY_DEVOPS_KEY_VALIDATION
+ get_value PING_IDENTITY_DEVOPS_KEY_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PING_IDENTITY_DEVOPS_KEY_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'License Key Info'
+ echo_bar
+ printf '################################################################################\n'
################################################################################
+ test -n 'License Key Info'
+ _msg='License Key Info'
+ shift
+ echo '#    License Key Info'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
#    License Key Info
################################################################################
+ echo_vars LICENSE_FILE_NAME LICENSE_SHORT_NAME LICENSE_VERSION MUTE_LICENSE_VERIFICATION
+ test -n LICENSE_FILE_NAME
+ _var=LICENSE_FILE_NAME
+ shift
+ get_value LICENSE_FILE_NAME
+ IFS='%%'
+ eval printf '%s' '${LICENSE_FILE_NAME}'
+ printf '%s' PingDirectory.lic
+ value=PingDirectory.lic
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z PingDirectory.lic
+ printf '%s' PingDirectory.lic
+ unset IFS
+ _val=PingDirectory.lic
+ grep -e '^LICENSE_FILE_NAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LICENSE_FILE_NAME_REDACT
+ get_value LICENSE_FILE_NAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${LICENSE_FILE_NAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
                 LICENSE_FILE_NAME : PingDirectory.lic 
+ printf '    %30s : %s %s\n' LICENSE_FILE_NAME PingDirectory.lic 
+ _varValidation=LICENSE_FILE_NAME_VALIDATION
+ get_value LICENSE_FILE_NAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LICENSE_FILE_NAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ + tr '[:upper:]'printf '[:lower:]' '%s'
 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n LICENSE_SHORT_NAME
+ _var=LICENSE_SHORT_NAME
+ shift
+ get_value LICENSE_SHORT_NAME
+ IFS='%%'
+ eval printf '%s' '${LICENSE_SHORT_NAME}'
+ printf '%s' PD
+ value=PD
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z PD
+ printf '%s' PD
+ unset IFS
+ _val=PD
+ grep -e '^LICENSE_SHORT_NAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LICENSE_SHORT_NAME_REDACT
+ get_value LICENSE_SHORT_NAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${LICENSE_SHORT_NAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' LICENSE_SHORT_NAME PD 
+ _varValidation=LICENSE_SHORT_NAME_VALIDATION
                LICENSE_SHORT_NAME : PD 
+ get_value LICENSE_SHORT_NAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LICENSE_SHORT_NAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n LICENSE_VERSION
+ _var=LICENSE_VERSION
+ shift
+ get_value LICENSE_VERSION
+ IFS='%%'
+ eval printf '%s' '${LICENSE_VERSION}'
+ printf '%s' 8.3
+ value=8.3
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 8.3
+ printf '%s' 8.3
+ unset IFS
+ _val=8.3
+ grep -e '^LICENSE_VERSION=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LICENSE_VERSION_REDACT
+ get_value LICENSE_VERSION_REDACT
+ IFS='%%'
+ eval printf '%s' '${LICENSE_VERSION_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' LICENSE_VERSION 8.3 
                   LICENSE_VERSION : 8.3 
+ _varValidation=LICENSE_VERSION_VALIDATION
+ get_value LICENSE_VERSION_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LICENSE_VERSION_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n MUTE_LICENSE_VERIFICATION
+ _var=MUTE_LICENSE_VERIFICATION
+ shift
+ get_value MUTE_LICENSE_VERIFICATION
+ IFS='%%'
+ eval printf '%s' '${MUTE_LICENSE_VERIFICATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _val=
+ grep -e '^MUTE_LICENSE_VERIFICATION=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=MUTE_LICENSE_VERIFICATION_REDACT
+ get_value MUTE_LICENSE_VERIFICATION_REDACT
+ IFS='%%'
+ eval printf '%s' '${MUTE_LICENSE_VERIFICATION_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' MUTE_LICENSE_VERIFICATION '--- empty ---' 
         MUTE_LICENSE_VERIFICATION : --- empty --- 
+ _varValidation=MUTE_LICENSE_VERIFICATION_VALIDATION
+ get_value MUTE_LICENSE_VERIFICATION_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${MUTE_LICENSE_VERIFICATION_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'Product Startup'
+ echo_bar
+ printf '################################################################################\n'
################################################################################
#    Product Startup
################################################################################
+ test -n 'Product Startup'
+ _msg='Product Startup'
+ shift
+ echo '#    Product Startup'
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars STARTUP_COMMAND STARTUP_FOREGROUND_OPTS STARTUP_BACKGROUND_OPTS VERBOSE PING_DEBUG CLEAN_STAGING_DIR
+ test -n STARTUP_COMMAND
+ _var=STARTUP_COMMAND
+ shift
+ get_value STARTUP_COMMAND
+ IFS='%%'
+ eval printf '%s' '${STARTUP_COMMAND}'
+ printf '%s' /opt/out/instance/bin/start-server
+ value=/opt/out/instance/bin/start-server
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z /opt/out/instance/bin/start-server
+ printf '%s' /opt/out/instance/bin/start-server
+ unset IFS
+ _val=/opt/out/instance/bin/start-server
+ grep -e '^STARTUP_COMMAND=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=STARTUP_COMMAND_REDACT
+ get_value STARTUP_COMMAND_REDACT
+ IFS='%%'
+ eval printf '%s' '${STARTUP_COMMAND_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' STARTUP_COMMAND /opt/out/instance/bin/start-server 
+ _varValidation=STARTUP_COMMAND_VALIDATION
                   STARTUP_COMMAND : /opt/out/instance/bin/start-server 
+ get_value STARTUP_COMMAND_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${STARTUP_COMMAND_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n STARTUP_FOREGROUND_OPTS
+ _var=STARTUP_FOREGROUND_OPTS
+ shift
+ get_value STARTUP_FOREGROUND_OPTS
+ IFS='%%'
+ eval printf '%s' '${STARTUP_FOREGROUND_OPTS}'
+ printf '%s' --nodetach
+ value=--nodetach
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z --nodetach
+ printf '%s' --nodetach
+ unset IFS
+ _val=--nodetach
+ grep -e '^STARTUP_FOREGROUND_OPTS=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=STARTUP_FOREGROUND_OPTS_REDACT
+ get_value STARTUP_FOREGROUND_OPTS_REDACT
+ IFS='%%'
+ eval printf '%s' '${STARTUP_FOREGROUND_OPTS_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' STARTUP_FOREGROUND_OPTS --nodetach 
+ _varValidation=STARTUP_FOREGROUND_OPTS_VALIDATION
           STARTUP_FOREGROUND_OPTS : --nodetach 
+ get_value STARTUP_FOREGROUND_OPTS_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${STARTUP_FOREGROUND_OPTS_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n STARTUP_BACKGROUND_OPTS
+ _var=STARTUP_BACKGROUND_OPTS
+ shift
+ get_value STARTUP_BACKGROUND_OPTS
+ IFS='%%'
+ eval printf '%s' '${STARTUP_BACKGROUND_OPTS}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _val=
+ grep -e '^STARTUP_BACKGROUND_OPTS=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=STARTUP_BACKGROUND_OPTS_REDACT
+ get_value STARTUP_BACKGROUND_OPTS_REDACT
+ IFS='%%'
+ eval printf '%s' '${STARTUP_BACKGROUND_OPTS_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' STARTUP_BACKGROUND_OPTS '--- empty ---' 
           STARTUP_BACKGROUND_OPTS : --- empty --- 
+ _varValidation=STARTUP_BACKGROUND_OPTS_VALIDATION
+ get_value STARTUP_BACKGROUND_OPTS_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${STARTUP_BACKGROUND_OPTS_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n VERBOSE
+ _var=VERBOSE
+ shift
+ get_value VERBOSE
+ IFS='%%'
+ eval printf '%s' '${VERBOSE}'
+ printf '%s' true
+ value=true
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z true
+ printf '%s' true
+ unset IFS
+ _val=true
+ grep -e '^VERBOSE=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=VERBOSE_REDACT
+ get_value VERBOSE_REDACT
+ IFS='%%'
+ eval printf '%s' '${VERBOSE_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' VERBOSE true 
                           VERBOSE : true 
+ _varValidation=VERBOSE_VALIDATION
+ get_value VERBOSE_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${VERBOSE_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n PING_DEBUG
+ _var=PING_DEBUG
+ shift
+ get_value PING_DEBUG
+ IFS='%%'
+ eval printf '%s' '${PING_DEBUG}'
+ printf '%s' false
+ value=false
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z false
+ printf '%s' false
+ unset IFS
+ _val=false
+ grep -e '^PING_DEBUG=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PING_DEBUG_REDACT
+ get_value PING_DEBUG_REDACT
+ IFS='%%'
+ eval printf '%s' '${PING_DEBUG_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PING_DEBUG false 
                        PING_DEBUG : false 
+ _varValidation=PING_DEBUG_VALIDATION
+ get_value PING_DEBUG_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PING_DEBUG_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n CLEAN_STAGING_DIR
+ _var=CLEAN_STAGING_DIR
+ shift
+ get_value CLEAN_STAGING_DIR
+ IFS='%%'
+ eval printf '%s' '${CLEAN_STAGING_DIR}'
+ printf '%s' true
+ value=true
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z true
+ printf '%s' true
+ unset IFS
+ _val=true
+ grep -e '^CLEAN_STAGING_DIR=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=CLEAN_STAGING_DIR_REDACT
+ get_value CLEAN_STAGING_DIR_REDACT
+ IFS='%%'
+ eval printf '%s' '${CLEAN_STAGING_DIR_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' CLEAN_STAGING_DIR true 
                 CLEAN_STAGING_DIR : true 
+ _varValidation=CLEAN_STAGING_DIR_VALIDATION
+ get_value CLEAN_STAGING_DIR_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${CLEAN_STAGING_DIR_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'Orchestration Info'
+ echo_bar
+ printf '################################################################################\n'
################################################################################
+ test -n 'Orchestration Info'
+ _msg='Orchestration Info'
+ shift
+ echo '#    Orchestration Info'
#    Orchestration Info
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars ORCHESTRATION_TYPE
+ test -n ORCHESTRATION_TYPE
+ _var=ORCHESTRATION_TYPE
################################################################################
+ shift
+ get_value ORCHESTRATION_TYPE
+ IFS='%%'
+ eval printf '%s' '${ORCHESTRATION_TYPE}'
+ printf '%s' KUBERNETES
+ value=KUBERNETES
+ toLower 
+ + printf '%s' 
tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z KUBERNETES
+ printf '%s' KUBERNETES
+ unset IFS
+ _val=KUBERNETES
+ grep -e '^ORCHESTRATION_TYPE=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=ORCHESTRATION_TYPE_REDACT
+ get_value ORCHESTRATION_TYPE_REDACT
+ IFS='%%'
+ eval printf '%s' '${ORCHESTRATION_TYPE_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' ORCHESTRATION_TYPE KUBERNETES 
                ORCHESTRATION_TYPE : KUBERNETES 
+ _varValidation=ORCHESTRATION_TYPE_VALIDATION
+ get_value ORCHESTRATION_TYPE_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${ORCHESTRATION_TYPE_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ test KUBERNETES '=' KUBERNETES
+ echo_vars K8S_CLUSTERS K8S_CLUSTER K8S_SEED_CLUSTER K8S_NUM_REPLICAS K8S_POD_HOSTNAME_PREFIX K8S_POD_HOSTNAME_SUFFIX K8S_SEED_HOSTNAME_SUFFIX K8S_INCREMENT_PORTS
+ test -n K8S_CLUSTERS
+ _var=K8S_CLUSTERS
+ shift
+ get_value K8S_CLUSTERS
+ IFS='%%'
+ eval printf '%s' '${K8S_CLUSTERS}'
+ printf '%s' 'usa aus'
+ value='usa aus'
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 'usa aus'
+ printf '%s' 'usa aus'
+ unset IFS
+ _val='usa aus'
+ grep -e '^K8S_CLUSTERS=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_CLUSTERS_REDACT
+ get_value K8S_CLUSTERS_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_CLUSTERS_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ + trprintf '[:upper:]' '%s' '[:lower:]' 

+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' K8S_CLUSTERS 'usa aus' 
                      K8S_CLUSTERS : usa aus 
+ _varValidation=K8S_CLUSTERS_VALIDATION
+ get_value K8S_CLUSTERS_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_CLUSTERS_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n K8S_CLUSTER
+ _var=K8S_CLUSTER
+ shift
+ get_value K8S_CLUSTER
+ IFS='%%'
+ eval printf '%s' '${K8S_CLUSTER}'
+ printf '%s' usa
+ value=usa
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z usa
+ printf '%s' usa
+ unset IFS
+ _val=usa
+ grep -e '^K8S_CLUSTER=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_CLUSTER_REDACT
+ get_value K8S_CLUSTER_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_CLUSTER_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
                       K8S_CLUSTER : usa 
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' K8S_CLUSTER usa 
+ _varValidation=K8S_CLUSTER_VALIDATION
+ get_value K8S_CLUSTER_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_CLUSTER_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n K8S_SEED_CLUSTER
+ _var=K8S_SEED_CLUSTER
+ shift
+ get_value K8S_SEED_CLUSTER
+ IFS='%%'
+ eval printf '%s' '${K8S_SEED_CLUSTER}'
+ printf '%s' usa
+ value=usa
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z usa
+ printf '%s' usa
+ unset IFS
+ _val=usa
+ grep -e '^K8S_SEED_CLUSTER=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_SEED_CLUSTER_REDACT
+ get_value K8S_SEED_CLUSTER_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_SEED_CLUSTER_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' K8S_SEED_CLUSTER usa 
                  K8S_SEED_CLUSTER : usa 
+ _varValidation=K8S_SEED_CLUSTER_VALIDATION
+ get_value K8S_SEED_CLUSTER_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_SEED_CLUSTER_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n K8S_NUM_REPLICAS
+ _var=K8S_NUM_REPLICAS
+ shift
+ get_value K8S_NUM_REPLICAS
+ IFS='%%'
+ eval printf '%s' '${K8S_NUM_REPLICAS}'
+ printf '%s' 9
+ value=9
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 9
+ printf '%s' 9
+ unset IFS
+ _val=9
+ grep -e '^K8S_NUM_REPLICAS=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_NUM_REPLICAS_REDACT
+ get_value K8S_NUM_REPLICAS_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_NUM_REPLICAS_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' K8S_NUM_REPLICAS 9 
                  K8S_NUM_REPLICAS : 9 
+ _varValidation=K8S_NUM_REPLICAS_VALIDATION
+ get_value K8S_NUM_REPLICAS_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_NUM_REPLICAS_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n K8S_POD_HOSTNAME_PREFIX
+ _var=K8S_POD_HOSTNAME_PREFIX
+ shift
+ get_value K8S_POD_HOSTNAME_PREFIX
+ IFS='%%'
+ eval printf '%s' '${K8S_POD_HOSTNAME_PREFIX}'
+ printf '%s' sam-pingdirectory-
+ value=sam-pingdirectory-
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z sam-pingdirectory-
+ printf '%s' sam-pingdirectory-
+ unset IFS
+ _val=sam-pingdirectory-
+ grep -e '^K8S_POD_HOSTNAME_PREFIX=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_POD_HOSTNAME_PREFIX_REDACT
+ get_value K8S_POD_HOSTNAME_PREFIX_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_POD_HOSTNAME_PREFIX_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' K8S_POD_HOSTNAME_PREFIX sam-pingdirectory- 
+ _varValidation=K8S_POD_HOSTNAME_PREFIX_VALIDATION
           K8S_POD_HOSTNAME_PREFIX : sam-pingdirectory- 
+ get_value K8S_POD_HOSTNAME_PREFIX_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_POD_HOSTNAME_PREFIX_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n K8S_POD_HOSTNAME_SUFFIX
+ _var=K8S_POD_HOSTNAME_SUFFIX
+ shift
+ get_value K8S_POD_HOSTNAME_SUFFIX
+ IFS='%%'
+ eval printf '%s' '${K8S_POD_HOSTNAME_SUFFIX}'
+ printf '%s' .usa.internal.ping-cluster.com
+ value=.usa.internal.ping-cluster.com
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z .usa.internal.ping-cluster.com
+ printf '%s' .usa.internal.ping-cluster.com
+ unset IFS
+ _val=.usa.internal.ping-cluster.com
+ grep -e '^K8S_POD_HOSTNAME_SUFFIX=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_POD_HOSTNAME_SUFFIX_REDACT
+ get_value K8S_POD_HOSTNAME_SUFFIX_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_POD_HOSTNAME_SUFFIX_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
           K8S_POD_HOSTNAME_SUFFIX : .usa.internal.ping-cluster.com 
+ printf '    %30s : %s %s\n' K8S_POD_HOSTNAME_SUFFIX .usa.internal.ping-cluster.com 
+ _varValidation=K8S_POD_HOSTNAME_SUFFIX_VALIDATION
+ get_value K8S_POD_HOSTNAME_SUFFIX_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_POD_HOSTNAME_SUFFIX_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n K8S_SEED_HOSTNAME_SUFFIX
+ _var=K8S_SEED_HOSTNAME_SUFFIX
+ shift
+ get_value K8S_SEED_HOSTNAME_SUFFIX
+ IFS='%%'
+ eval printf '%s' '${K8S_SEED_HOSTNAME_SUFFIX}'
+ printf '%s' .usa.internal.ping-cluster.com
+ value=.usa.internal.ping-cluster.com
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z .usa.internal.ping-cluster.com
+ printf '%s' .usa.internal.ping-cluster.com
+ unset IFS
+ _val=.usa.internal.ping-cluster.com
+ grep -e '^K8S_SEED_HOSTNAME_SUFFIX=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_SEED_HOSTNAME_SUFFIX_REDACT
+ get_value K8S_SEED_HOSTNAME_SUFFIX_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_SEED_HOSTNAME_SUFFIX_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' K8S_SEED_HOSTNAME_SUFFIX .usa.internal.ping-cluster.com 
          K8S_SEED_HOSTNAME_SUFFIX : .usa.internal.ping-cluster.com 
+ _varValidation=K8S_SEED_HOSTNAME_SUFFIX_VALIDATION
+ get_value K8S_SEED_HOSTNAME_SUFFIX_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_SEED_HOSTNAME_SUFFIX_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n K8S_INCREMENT_PORTS
+ _var=K8S_INCREMENT_PORTS
+ shift
+ get_value K8S_INCREMENT_PORTS
+ IFS='%%'
+ eval printf '%s' '${K8S_INCREMENT_PORTS}'
+ printf '%s' false
+ value=false
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z false
+ printf '%s' false
+ unset IFS
+ _val=false
+ grep -e '^K8S_INCREMENT_PORTS=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=K8S_INCREMENT_PORTS_REDACT
+ get_value K8S_INCREMENT_PORTS_REDACT
+ IFS='%%'
+ eval printf '%s' '${K8S_INCREMENT_PORTS_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' K8S_INCREMENT_PORTS false 
               K8S_INCREMENT_PORTS : false 
+ _varValidation=K8S_INCREMENT_PORTS_VALIDATION
+ get_value K8S_INCREMENT_PORTS_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${K8S_INCREMENT_PORTS_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ test KUBERNETES '=' COMPOSE
+ echo_header 'Ping Product Info'
+ echo_bar
################################################################################
+ printf '################################################################################\n'
+ test -n 'Ping Product Info'
+ _msg='Ping Product Info'
+ shift
+ echo '#    Ping Product Info'
#    Ping Product Info
################################################################################
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ echo_vars PING_PRODUCT LOCATION LDAP_PORT LDAPS_PORT HTTPS_PORT JMX_PORT
+ test -n PING_PRODUCT
+ _var=PING_PRODUCT
+ shift
+ get_value PING_PRODUCT
+ IFS='%%'
+ eval printf '%s' '${PING_PRODUCT}'
+ printf '%s' PingDirectory
+ value=PingDirectory
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z PingDirectory
+ printf '%s' PingDirectory
+ unset IFS
+ _val=PingDirectory
+ grep -e '^PING_PRODUCT=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PING_PRODUCT_REDACT
+ get_value PING_PRODUCT_REDACT
+ IFS='%%'
+ eval printf '%s' '${PING_PRODUCT_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PING_PRODUCT PingDirectory 
+ _varValidation=PING_PRODUCT_VALIDATION
                      PING_PRODUCT : PingDirectory 
+ get_value PING_PRODUCT_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PING_PRODUCT_VALIDATION}'
+ printf '%s' 'true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ value='true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 'true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ printf '%s' 'true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ unset IFS
+ _valValidation='true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ test -n 'true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ sed 's/^\(.*\)|\(.*\)|\(.*\)$/\1/g'
+ echo 'true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ _validReq=true
+ echo 'true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'
+ sed 's/^\(.*\)|\(.*\)|\(.*\)$/\2/g'
+ _validVal='i.e. PingFederate,PingDirectory'
+ + echosed 's/^\(.*\)|\(.*\)|\(.*\)$/\3/g' 'true|i.e. PingFederate,PingDirectory|Must be a valid Ping prouduct type'

+ _validMsg='Must be a valid Ping prouduct type'
+ test true '=' true
+ test -z PingDirectory
+ test -n LOCATION
+ _var=LOCATION
+ shift
+ get_value LOCATION
+ IFS='%%'
+ eval printf '%s' '${LOCATION}'
+ printf '%s' usa
+ value=usa
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z usa
+ printf '%s' usa
+ unset IFS
+ _val=usa
+ grep -e '^LOCATION=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LOCATION_REDACT
+ get_value LOCATION_REDACT
+ IFS='%%'
+ eval printf '%s' '${LOCATION_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' LOCATION usa 
                          LOCATION : usa 
+ _varValidation=LOCATION_VALIDATION
+ get_value LOCATION_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LOCATION_VALIDATION}'
+ printf '%s' 'true|Any string denoting a logical/physical location|Must be a string'
+ value='true|Any string denoting a logical/physical location|Must be a string'
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 'true|Any string denoting a logical/physical location|Must be a string'
+ printf '%s' 'true|Any string denoting a logical/physical location|Must be a string'
+ unset IFS
+ _valValidation='true|Any string denoting a logical/physical location|Must be a string'
+ test -n 'true|Any string denoting a logical/physical location|Must be a string'
+ echo 'true|Any string denoting a logical/physical location|Must be a string'
+ sed 's/^\(.*\)|\(.*\)|\(.*\)$/\1/g'
+ _validReq=true
+ sed 's/^\(.*\)|\(.*\)|\(.*\)$/\2/g'
+ echo 'true|Any string denoting a logical/physical location|Must be a string'
+ _validVal='Any string denoting a logical/physical location'
+ echo 'true|Any string denoting a logical/physical location|Must be a string'
+ sed 's/^\(.*\)|\(.*\)|\(.*\)$/\3/g'
+ _validMsg='Must be a string'
+ test true '=' true
+ test -z usa
+ test -n LDAP_PORT
+ _var=LDAP_PORT
+ shift
+ get_value LDAP_PORT
+ IFS='%%'
+ eval printf '%s' '${LDAP_PORT}'
+ printf '%s' 1389
+ value=1389
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 1389
+ printf '%s' 1389
+ unset IFS
+ _val=1389
+ grep -e '^LDAP_PORT=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LDAP_PORT_REDACT
+ get_value LDAP_PORT_REDACT
+ IFS='%%'
+ eval printf '%s' '${LDAP_PORT_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ + trprintf '[:upper:]' '%s' '[:lower:]'
 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' LDAP_PORT 1389 
+ _varValidation=LDAP_PORT_VALIDATION
                         LDAP_PORT : 1389 
+ get_value LDAP_PORT_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LDAP_PORT_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ + trprintf '[:upper:]' '%s' '[:lower:]'
 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n LDAPS_PORT
+ _var=LDAPS_PORT
+ shift
+ get_value LDAPS_PORT
+ IFS='%%'
+ eval printf '%s' '${LDAPS_PORT}'
+ printf '%s' 1636
+ value=1636
+ toLower 
+ + printftr '%s'  '[:upper:]'
 '[:lower:]'
+ checkFile=
+ test -z 1636
+ printf '%s' 1636
+ unset IFS
+ _val=1636
+ grep -e '^LDAPS_PORT=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=LDAPS_PORT_REDACT
+ get_value LDAPS_PORT_REDACT
+ IFS='%%'
+ eval printf '%s' '${LDAPS_PORT_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'+ 
printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' LDAPS_PORT 1636 
                        LDAPS_PORT : 1636 
+ _varValidation=LDAPS_PORT_VALIDATION
+ get_value LDAPS_PORT_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${LDAPS_PORT_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n HTTPS_PORT
+ _var=HTTPS_PORT
+ shift
+ get_value HTTPS_PORT
+ IFS='%%'
+ eval printf '%s' '${HTTPS_PORT}'
+ printf '%s' 1443
+ value=1443
+ toLower 
+ tr '[:upper:]'+  '[:lower:]'
printf '%s' 
+ checkFile=
+ test -z 1443
+ printf '%s' 1443
+ unset IFS
+ _val=1443
+ grep -e '^HTTPS_PORT=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=HTTPS_PORT_REDACT
+ get_value HTTPS_PORT_REDACT
+ IFS='%%'
+ eval printf '%s' '${HTTPS_PORT_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' HTTPS_PORT 1443 
                        HTTPS_PORT : 1443 
+ _varValidation=HTTPS_PORT_VALIDATION
+ get_value HTTPS_PORT_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${HTTPS_PORT_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n JMX_PORT
+ _var=JMX_PORT
+ shift
+ get_value JMX_PORT
+ IFS='%%'
+ eval printf '%s' '${JMX_PORT}'
+ printf '%s' 1689
+ value=1689
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 1689
+ printf '%s' 1689
+ unset IFS
+ _val=1689
+ grep -e '^JMX_PORT=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=JMX_PORT_REDACT
+ get_value JMX_PORT_REDACT
+ IFS='%%'
+ eval printf '%s' '${JMX_PORT_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' JMX_PORT 1689 
                          JMX_PORT : 1689 
+ _varValidation=JMX_PORT_VALIDATION
+ get_value JMX_PORT_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${JMX_PORT_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_vars USER_BASE_DN
+ test -n USER_BASE_DN
+ _var=USER_BASE_DN
+ shift
+ get_value USER_BASE_DN
+ IFS='%%'
+ eval printf '%s' '${USER_BASE_DN}'
+ printf '%s' 'dc=example,dc=com'
+ value='dc=example,dc=com'
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 'dc=example,dc=com'
+ printf '%s' 'dc=example,dc=com'
+ unset IFS
+ _val='dc=example,dc=com'
+ grep -e '^USER_BASE_DN=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=USER_BASE_DN_REDACT
+ get_value USER_BASE_DN_REDACT
+ IFS='%%'
+ eval printf '%s' '${USER_BASE_DN_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' USER_BASE_DN 'dc=example,dc=com' 
                      USER_BASE_DN : dc=example,dc=com 
+ _varValidation=USER_BASE_DN_VALIDATION
+ get_value USER_BASE_DN_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${USER_BASE_DN_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_vars PD_ENGINE_PUBLIC_HOSTNAME
+ test -n PD_ENGINE_PUBLIC_HOSTNAME
+ _var=PD_ENGINE_PUBLIC_HOSTNAME
+ shift
+ get_value PD_ENGINE_PUBLIC_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${PD_ENGINE_PUBLIC_HOSTNAME}'
+ printf '%s' localhost
+ value=localhost
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z localhost
+ printf '%s' localhost
+ unset IFS
+ _val=localhost
+ grep -e '^PD_ENGINE_PUBLIC_HOSTNAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PD_ENGINE_PUBLIC_HOSTNAME_REDACT
+ get_value PD_ENGINE_PUBLIC_HOSTNAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${PD_ENGINE_PUBLIC_HOSTNAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
         PD_ENGINE_PUBLIC_HOSTNAME : localhost 
+ printf '    %30s : %s %s\n' PD_ENGINE_PUBLIC_HOSTNAME localhost 
+ _varValidation=PD_ENGINE_PUBLIC_HOSTNAME_VALIDATION
+ get_value PD_ENGINE_PUBLIC_HOSTNAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PD_ENGINE_PUBLIC_HOSTNAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_vars PF_ADMIN_PUBLIC_HOSTNAME PF_ENGINE_PUBLIC_HOSTNAME
+ test -n PF_ADMIN_PUBLIC_HOSTNAME
+ _var=PF_ADMIN_PUBLIC_HOSTNAME
+ shift
+ get_value PF_ADMIN_PUBLIC_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${PF_ADMIN_PUBLIC_HOSTNAME}'
+ printf '%s' localhost
+ value=localhost
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z localhost
+ printf '%s' localhost
+ unset IFS
+ _val=localhost
+ grep -e '^PF_ADMIN_PUBLIC_HOSTNAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PF_ADMIN_PUBLIC_HOSTNAME_REDACT
+ get_value PF_ADMIN_PUBLIC_HOSTNAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${PF_ADMIN_PUBLIC_HOSTNAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PF_ADMIN_PUBLIC_HOSTNAME localhost 
          PF_ADMIN_PUBLIC_HOSTNAME : localhost 
+ _varValidation=PF_ADMIN_PUBLIC_HOSTNAME_VALIDATION
+ get_value PF_ADMIN_PUBLIC_HOSTNAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PF_ADMIN_PUBLIC_HOSTNAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ + printf '%s'tr  '[:upper:]'
 '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n PF_ENGINE_PUBLIC_HOSTNAME
+ _var=PF_ENGINE_PUBLIC_HOSTNAME
+ shift
+ get_value PF_ENGINE_PUBLIC_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${PF_ENGINE_PUBLIC_HOSTNAME}'
+ printf '%s' localhost
+ value=localhost
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z localhost
+ printf '%s' localhost
+ unset IFS
+ _val=localhost
+ grep -e '^PF_ENGINE_PUBLIC_HOSTNAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PF_ENGINE_PUBLIC_HOSTNAME_REDACT
+ get_value PF_ENGINE_PUBLIC_HOSTNAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${PF_ENGINE_PUBLIC_HOSTNAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PF_ENGINE_PUBLIC_HOSTNAME localhost 
+ _varValidation=PF_ENGINE_PUBLIC_HOSTNAME_VALIDATION
         PF_ENGINE_PUBLIC_HOSTNAME : localhost 
+ get_value PF_ENGINE_PUBLIC_HOSTNAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PF_ENGINE_PUBLIC_HOSTNAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_vars PA_ADMIN_PUBLIC_HOSTNAME PA_ENGINE_PUBLIC_HOSTNAME
+ test -n PA_ADMIN_PUBLIC_HOSTNAME
+ _var=PA_ADMIN_PUBLIC_HOSTNAME
+ shift
+ get_value PA_ADMIN_PUBLIC_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${PA_ADMIN_PUBLIC_HOSTNAME}'
+ printf '%s' localhost
+ value=localhost
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z localhost
+ printf '%s' localhost
+ unset IFS
+ _val=localhost
+ grep -e '^PA_ADMIN_PUBLIC_HOSTNAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PA_ADMIN_PUBLIC_HOSTNAME_REDACT
+ get_value PA_ADMIN_PUBLIC_HOSTNAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${PA_ADMIN_PUBLIC_HOSTNAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PA_ADMIN_PUBLIC_HOSTNAME localhost 
+ _varValidation=PA_ADMIN_PUBLIC_HOSTNAME_VALIDATION
          PA_ADMIN_PUBLIC_HOSTNAME : localhost 
+ get_value PA_ADMIN_PUBLIC_HOSTNAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PA_ADMIN_PUBLIC_HOSTNAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n PA_ENGINE_PUBLIC_HOSTNAME
+ _var=PA_ENGINE_PUBLIC_HOSTNAME
+ shift
+ get_value PA_ENGINE_PUBLIC_HOSTNAME
+ IFS='%%'
+ eval printf '%s' '${PA_ENGINE_PUBLIC_HOSTNAME}'
+ printf '%s' localhost
+ value=localhost
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z localhost
+ printf '%s' localhost
+ unset IFS
+ _val=localhost
+ grep -e '^PA_ENGINE_PUBLIC_HOSTNAME=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PA_ENGINE_PUBLIC_HOSTNAME_REDACT
+ get_value PA_ENGINE_PUBLIC_HOSTNAME_REDACT
+ IFS='%%'
+ eval printf '%s' '${PA_ENGINE_PUBLIC_HOSTNAME_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PA_ENGINE_PUBLIC_HOSTNAME localhost 
+ _varValidation=PA_ENGINE_PUBLIC_HOSTNAME_VALIDATION
         PA_ENGINE_PUBLIC_HOSTNAME : localhost 
+ get_value PA_ENGINE_PUBLIC_HOSTNAME_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PA_ENGINE_PUBLIC_HOSTNAME_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_vars PF_ADMIN_PUBLIC_BASEURL
+ test -n PF_ADMIN_PUBLIC_BASEURL
+ _var=PF_ADMIN_PUBLIC_BASEURL
+ shift
+ get_value PF_ADMIN_PUBLIC_BASEURL
+ IFS='%%'
+ eval printf '%s' '${PF_ADMIN_PUBLIC_BASEURL}'
+ printf '%s' https://localhost:9999
+ value=https://localhost:9999
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z https://localhost:9999
+ printf '%s' https://localhost:9999
+ unset IFS
+ _val=https://localhost:9999
+ grep -e '^PF_ADMIN_PUBLIC_BASEURL=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=PF_ADMIN_PUBLIC_BASEURL_REDACT
+ get_value PF_ADMIN_PUBLIC_BASEURL_REDACT
+ IFS='%%'
+ eval printf '%s' '${PF_ADMIN_PUBLIC_BASEURL_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' PF_ADMIN_PUBLIC_BASEURL https://localhost:9999 
           PF_ADMIN_PUBLIC_BASEURL : https://localhost:9999 
+ _varValidation=PF_ADMIN_PUBLIC_BASEURL_VALIDATION
+ get_value PF_ADMIN_PUBLIC_BASEURL_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${PF_ADMIN_PUBLIC_BASEURL_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_vars ROOT_USER_DN
+ test -n ROOT_USER_DN
+ _var=ROOT_USER_DN
+ shift
+ get_value ROOT_USER_DN
+ IFS='%%'
+ eval printf '%s' '${ROOT_USER_DN}'
+ printf '%s' 'cn=administrator'
+ value='cn=administrator'
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 'cn=administrator'
+ printf '%s' 'cn=administrator'
+ unset IFS
+ _val='cn=administrator'
+ grep -e '^ROOT_USER_DN=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=ROOT_USER_DN_REDACT
+ get_value ROOT_USER_DN_REDACT
+ IFS='%%'
+ eval printf '%s' '${ROOT_USER_DN_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' ROOT_USER_DN 'cn=administrator' 
                      ROOT_USER_DN : cn=administrator 
+ _varValidation=ROOT_USER_DN_VALIDATION
+ get_value ROOT_USER_DN_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${ROOT_USER_DN_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_vars ADDITIONAL_SETUP_ARGS
+ test -n ADDITIONAL_SETUP_ARGS
+ _var=ADDITIONAL_SETUP_ARGS
+ shift
+ get_value ADDITIONAL_SETUP_ARGS
+ IFS='%%'
+ eval printf '%s' '${ADDITIONAL_SETUP_ARGS}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _val=
+ grep -e '^ADDITIONAL_SETUP_ARGS=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=ADDITIONAL_SETUP_ARGS_REDACT
+ get_value ADDITIONAL_SETUP_ARGS_REDACT
+ IFS='%%'
+ eval printf '%s' '${ADDITIONAL_SETUP_ARGS_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' ADDITIONAL_SETUP_ARGS '--- empty ---' 
             ADDITIONAL_SETUP_ARGS : --- empty --- 
+ _varValidation=ADDITIONAL_SETUP_ARGS_VALIDATION
+ get_value ADDITIONAL_SETUP_ARGS_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${ADDITIONAL_SETUP_ARGS_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ tr '[:upper:]'+  '[:lower:]'
printf '%s' 
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_header 'JVM Details'
+ echo_bar
+ printf '################################################################################\n'
################################################################################
+ test -n 'JVM Details'
+ _msg='JVM Details'
+ shift
+ echo '#    JVM Details'
#    JVM Details
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
################################################################################
+ echo_vars MAX_HEAP_SIZE JVM_TUNING
+ test -n MAX_HEAP_SIZE
+ _var=MAX_HEAP_SIZE
+ shift
+ get_value MAX_HEAP_SIZE
+ IFS='%%'
+ eval printf '%s' '${MAX_HEAP_SIZE}'
+ printf '%s' 384m
+ value=384m
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 384m
+ printf '%s' 384m
+ unset IFS
+ _val=384m
+ grep -e '^MAX_HEAP_SIZE=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=MAX_HEAP_SIZE_REDACT
+ get_value MAX_HEAP_SIZE_REDACT
+ IFS='%%'
+ eval printf '%s' '${MAX_HEAP_SIZE_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' MAX_HEAP_SIZE 384m 
                     MAX_HEAP_SIZE : 384m 
+ _varValidation=MAX_HEAP_SIZE_VALIDATION
+ get_value MAX_HEAP_SIZE_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${MAX_HEAP_SIZE_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n JVM_TUNING
+ _var=JVM_TUNING
+ shift
+ get_value JVM_TUNING
+ IFS='%%'
+ eval printf '%s' '${JVM_TUNING}'
+ printf '%s' AGGRESSIVE
+ value=AGGRESSIVE
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z AGGRESSIVE
+ printf '%s' AGGRESSIVE
+ unset IFS
+ _val=AGGRESSIVE
+ grep -e '^JVM_TUNING=' /opt/staging/env_vars
+ test 1 -eq 0
+ _overridden=
+ _varRedact=JVM_TUNING_REDACT
+ get_value JVM_TUNING_REDACT
+ IFS='%%'
+ eval printf '%s' '${JVM_TUNING_REDACT}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _varRedact=
+ test  '=' true
+ test false '=' true
+ printf '    %30s : %s %s\n' JVM_TUNING AGGRESSIVE 
+ _varValidation=JVM_TUNING_VALIDATION
                        JVM_TUNING : AGGRESSIVE 
+ get_value JVM_TUNING_VALIDATION
+ IFS='%%'
+ eval printf '%s' '${JVM_TUNING_VALIDATION}'
+ printf '%s'
+ value=
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ checkFile=
+ test -z 
+ test  '=' true
+ printf '%s' 
+ unset IFS
+ _valValidation=
+ test -n 
+ test -n 
+ echo_bar
+ printf '################################################################################\n'
+ test false '=' true
################################################################################

+ echo 
+ return 0
+ die_on_error 04 'Error running 04-check-variables.sh'
+ _errorCode=0
+ _exitCode=04
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/04-check-variables.sh.post
+ _runFile=/opt/staging/hooks/04-check-variables.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/04-check-variables.sh.post
+ echo 
+ die_on_error 04 'Error running 04-check-variables.sh.post'
+ _errorCode=0

+ _exitCode=04
+ shift
+ test 0 -ne 0
+ run_hook 05-expand-templates.sh
+ _hookScript=05-expand-templates.sh
+ echo 05-expand-templates.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=05
+ test -z 05
+ run_if_present /opt/staging/hooks/05-expand-templates.sh.pre
+ _runFile=/opt/staging/hooks/05-expand-templates.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/05-expand-templates.sh.pre
+ echo 

+ die_on_error 05 'Error running 05-expand-templates.sh.pre'
+ _errorCode=0
+ _exitCode=05
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/05-expand-templates.sh
+ _runFile=/opt/staging/hooks/05-expand-templates.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/05-expand-templates.sh
+ sh -x /opt/staging/hooks/05-expand-templates.sh
+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/05-expand-templates.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/05-expand-templates.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/05-expand-templates.sh'
+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/05-expand-templates.sh' '\033[0m'
+ source_container_env
[0;32m----- Starting hook: /opt/staging/hooks/05-expand-templates.sh[0m
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ export '_DOLLAR_=$'
+ cd /opt/staging
+ find . -type f -iname '*.zip.subst'
+ IFS= read -r _zipBundle
+ rm tmp
+ echo 'expanding files...'
+ cd /opt/staging
+ expandFiles
+ echo '  Processing templates'
+ find . -type f -iname '*.subst'
expanding files...
  Processing templates
    t - ./pd.profile/ldif/userRoot/11-autogen-users.template.subst
+ IFS= read -r template
+ echo '    t - ./pd.profile/ldif/userRoot/11-autogen-users.template.subst'
+ getEnvKeys
+ env
+ sed -e 's/^/$/'
+ cut '-d=' -f1
+ envsubst ''"'"'$PA_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PUBLIC_HOSTNAME
$PAZP_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_ADDR
$PA_ADMIN_PRIVATE_PORT_HTTPS
$MAKELDIF_USERS
$KUBERNETES_SERVICE_PORT
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PORT
$KUBERNETES_PORT
$SAM_PINGFEDERATE_ENGINE_SERVICE_HOST
$SERVER_ROOT_DIR
$PING_IDENTITY_DEVOPS_FILE
$SECURITY_CHECKS_FILENAME
$STARTUP_COMMAND
$DOMAIN_NAME
$RUN_PLAN
$_seedInstanceName
$PDGP_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PROTO
$SAM_PINGFEDERATE_ADMIN_SERVICE_HOST
$LICENSE_FILE_NAME
$PD_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PORT
$HOSTNAME
$PA_ENGINE_PUBLIC_HOSTNAME
$PD_CONSOLE_PUBLIC_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PROTO
$SAM_PINGDIRECTORY_PORT_636_TCP_ADDR
$INSTANCE_NAME
$PA_ADMIN_PUBLIC_HOSTNAME
$PF_ENGINE_PRIVATE_PORT_HTTPS
$PDP_ENGINE_PRIVATE_PORT_HTTPS
$SERVER_PROFILE_UPDATE
$SHLVL
$PD_ENGINE_PRIVATE_PORT_LDAP
$PF_ADMIN_PRIVATE_PORT_HTTPS
$MOTD_URL
$HOME
$OLDPWD
$PD_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP_PORT
$LOCATION_VALIDATION
$PF_ADMIN_PUBLIC_BASEURL
$PDS_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT
$SAM_PINGDIRECTORY_PORT_636_TCP_PROTO
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT
$CONTAINER_ENV
$PING_IDENTITY_DEVOPS_KEY_REDACT
$PING_DEBUG
$SEED_LDAPS_PORT
$PF_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP_ADDR
$SAM_PINGFEDERATE_ADMIN_PORT
$JAVA_RAM_PERCENTAGE
$ADDITIONAL_SETUP_ARGS
$PDP_ENGINE_PUBLIC_HOSTNAME
$PS1
$PF_ADMIN_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP
$LOGS_DIR
$JMX_PORT
$_seedLocation
$PD_ENGINE_PRIVATE_PORT_LDAPS
$SERVER_PROFILE_PATH
$SERVER_PROFILE_DIR
$STARTUP_FOREGROUND_OPTS
$TAIL_LOG_FILES
$ENV
$_seedReplicationPort
$_DOLLAR_
$PAZ_ENGINE_PRIVATE_PORT_HTTPS
$PD_DELEGATOR_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP
$STAGING_MANIFEST
$PDS_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PROTO
$BASE
$DOLLAR
$PD_REBUILD_ON_RESTART
$PING_IDENTITY_ACCEPT_EULA
$PAZP_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_SERVICE_HOST
$SECURITY_CHECKS_STRICT
$LDAP_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAP
$SERVER_PROFILE_URL_REDACT
$ADMIN_USER_NAME
$POD_LDAPS_PORT
$PAZ_ENGINE_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP
$SAM_PINGDATACONSOLE_SERVICE_HOST
$CERTIFICATE_NICKNAME
$PD_CONSOLE_PRIVATE_PORT_HTTPS
$PAZP_ENGINE_PUBLIC_HOSTNAME
$PA_ENGINE_PRIVATE_HOSTNAME
$SEED_HOSTNAME
$PA_ADMIN_PRIVATE_HOSTNAME
$PD_DELEGATOR_PUBLIC_PORT_HTTPS
$KUBERNETES_PORT_443_TCP_ADDR
$LDAPS_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAPS
$SAM_PINGDATACONSOLE_PORT_8443_TCP_ADDR
$BAK_DIR
$PATH
$PD_ENGINE_PRIVATE_HOSTNAME
$K8S_NUM_REPLICAS
$PDG_ENGINE_PUBLIC_PORT_HTTPS
$K8S_SEED_CLUSTER
$SAM_PINGDIRECTORY_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP
$LICENSE_DIR
$HOST_NAME
$K8S_SEED_HOSTNAME_SUFFIX
$PD_CONSOLE_PUBLIC_HOSTNAME
$KUBERNETES_PORT_443_TCP_PORT
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_ADDR
$ROOT_USER
$SERVER_BITS_DIR
$UNSAFE_CONTINUE_ON_ERROR
$PING_PRODUCT_VALIDATION
$RETRY_TIMEOUT_SECONDS
$PDGP_ENGINE_PUBLIC_PORT_HTTPS
$PF_ENGINE_PRIVATE_HOSTNAME
$SERVER_PROFILE_BRANCH
$PDP_ENGINE_PRIVATE_HOSTNAME
$KUBERNETES_PORT_443_TCP_PROTO
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PORT
$STARTUP_BACKGROUND_OPTS
$LOCATION
$IMAGE_VERSION
$REPLICATION_PORT
$PING_IDENTITY_DEVOPS_KEY
$PF_ADMIN_PRIVATE_HOSTNAME
$SAM_PINGDATACONSOLE_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PROTO
$TOPOLOGY_FILE
$COLORIZE_LOGS
$ENCRYPTION_PASSWORD_FILE
$PD_PROFILE
$_podInstanceName
$PA_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PORT
$CLEAN_STAGING_DIR
$HOOKS_DIR
$HTTPS_PORT
$POD_HOSTNAME
$PA_ADMIN_PUBLIC_PORT_HTTPS
$ORCHESTRATION_TYPE
$PDS_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PROTO
$STAGING_DIR
$K8S_CLUSTER
$PD_ENGINE_PUBLIC_PORT_HTTPS
$ROOT_USER_DN
$PF_ENGINE_PUBLIC_PORT_HTTPS
$PAZ_ENGINE_PRIVATE_HOSTNAME
$MAX_HEAP_SIZE
$PF_ADMIN_PUBLIC_PORT_HTTPS
$SERVER_PROFILE_URL
$K8S_POD_HOSTNAME_PREFIX
$KUBERNETES_SERVICE_PORT_HTTPS
$KUBERNETES_PORT_443_TCP
$K8S_CLUSTERS
$PAZP_ENGINE_PRIVATE_HOSTNAME
$K8S_STATEFUL_SET_NAME
$K8S_STATEFUL_SET_SERVICE_NAME
$PING_IDENTITY_DEVOPS_USER
$SAM_PINGDATACONSOLE_PORT_8443_TCP
$PD_DELEGATOR_PRIVATE_PORT_HTTPS
$KUBERNETES_SERVICE_HOST
$JAVA_HOME
$IMAGE_GIT_REV
$PWD
$_podLocation
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP
$SHIM
$ADMIN_USER_PASSWORD_FILE
$DISABLE_SCHEMA_REPLICATION
$FIPS_PROVIDER
$_podReplicationPort
$PDG_ENGINE_PRIVATE_PORT_HTTPS
$JVM_TUNING
$ROOT_USER_PASSWORD_FILE
$PD_CONSOLE_PRIVATE_HOSTNAME
$PA_ADMIN_PRIVATE_PORT_CLUSTERCONFIG
$OUT_DIR
$USER_BASE_DN
$LICENSE_SHORT_NAME
$LICENSE_VERSION
$PD_STATE
$K8S_INCREMENT_PORTS
$PAZ_ENGINE_PUBLIC_PORT_HTTPS
$PD_DELEGATOR_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_ADDR
$VERBOSE
$K8S_POD_HOSTNAME_SUFFIX
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT_HTTPS
$IN_DIR
$SECRETS_DIR
$PING_PRODUCT
$FIPS_MODE_ON'"'"
+ rm -f ./pd.profile/ldif/userRoot/11-autogen-users.template.subst
+ IFS= read -r template
+ rm tmp
+ echo '  Processing defaults'
  Processing defaults
+ find . -type f -iname '*.subst.default'
+ IFS= read -r template
+ printf '    d - %s .. ' ./instance/config/java.properties.aarch64.subst.default
+ _effectiveFile=./instance/config/java.properties.aarch64
+ _processDefault=true
+ test START '=' RESTART
+ test -f ./instance/config/java.properties.aarch64
+ test true '=' true
+ getEnvKeys
+ env
+ cut '-d=' -f1
+ sed -e 's/^/$/'
+ envsubst ''"'"'$PA_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PUBLIC_HOSTNAME
$PAZP_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_ADDR
$PA_ADMIN_PRIVATE_PORT_HTTPS
$MAKELDIF_USERS
$KUBERNETES_SERVICE_PORT
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PORT
$KUBERNETES_PORT
$SAM_PINGFEDERATE_ENGINE_SERVICE_HOST
$SERVER_ROOT_DIR
$PING_IDENTITY_DEVOPS_FILE
$SECURITY_CHECKS_FILENAME
$STARTUP_COMMAND
$DOMAIN_NAME
$RUN_PLAN
$_seedInstanceName
$PDGP_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PROTO
$SAM_PINGFEDERATE_ADMIN_SERVICE_HOST
$LICENSE_FILE_NAME
$PD_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PORT
$HOSTNAME
$PA_ENGINE_PUBLIC_HOSTNAME
$PD_CONSOLE_PUBLIC_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PROTO
$SAM_PINGDIRECTORY_PORT_636_TCP_ADDR
$INSTANCE_NAME
$PA_ADMIN_PUBLIC_HOSTNAME
$PF_ENGINE_PRIVATE_PORT_HTTPS
$PDP_ENGINE_PRIVATE_PORT_HTTPS
$SERVER_PROFILE_UPDATE
$SHLVL
$PD_ENGINE_PRIVATE_PORT_LDAP
$PF_ADMIN_PRIVATE_PORT_HTTPS
$MOTD_URL
$HOME
$OLDPWD
$PD_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP_PORT
$LOCATION_VALIDATION
$PF_ADMIN_PUBLIC_BASEURL
$PDS_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT
$SAM_PINGDIRECTORY_PORT_636_TCP_PROTO
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT
$CONTAINER_ENV
$PING_IDENTITY_DEVOPS_KEY_REDACT
$PING_DEBUG
$SEED_LDAPS_PORT
$PF_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP_ADDR
$SAM_PINGFEDERATE_ADMIN_PORT
$JAVA_RAM_PERCENTAGE
$ADDITIONAL_SETUP_ARGS
$PDP_ENGINE_PUBLIC_HOSTNAME
$PS1
$PF_ADMIN_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP
$LOGS_DIR
$JMX_PORT
$_seedLocation
$PD_ENGINE_PRIVATE_PORT_LDAPS
$SERVER_PROFILE_PATH
$SERVER_PROFILE_DIR
$STARTUP_FOREGROUND_OPTS
$TAIL_LOG_FILES
$ENV
$_seedReplicationPort
$_DOLLAR_
$PAZ_ENGINE_PRIVATE_PORT_HTTPS
$PD_DELEGATOR_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP
$STAGING_MANIFEST
$PDS_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PROTO
$BASE
$DOLLAR
$PD_REBUILD_ON_RESTART
$PING_IDENTITY_ACCEPT_EULA
$PAZP_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_SERVICE_HOST
$SECURITY_CHECKS_STRICT
$LDAP_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAP
$SERVER_PROFILE_URL_REDACT
$ADMIN_USER_NAME
$POD_LDAPS_PORT
$PAZ_ENGINE_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP
$SAM_PINGDATACONSOLE_SERVICE_HOST
$CERTIFICATE_NICKNAME
$PD_CONSOLE_PRIVATE_PORT_HTTPS
$PAZP_ENGINE_PUBLIC_HOSTNAME
$PA_ENGINE_PRIVATE_HOSTNAME
$SEED_HOSTNAME
$PA_ADMIN_PRIVATE_HOSTNAME
$PD_DELEGATOR_PUBLIC_PORT_HTTPS
$KUBERNETES_PORT_443_TCP_ADDR
$LDAPS_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAPS
$SAM_PINGDATACONSOLE_PORT_8443_TCP_ADDR
$BAK_DIR
$PATH
$PD_ENGINE_PRIVATE_HOSTNAME
$K8S_NUM_REPLICAS
$PDG_ENGINE_PUBLIC_PORT_HTTPS
$K8S_SEED_CLUSTER
$SAM_PINGDIRECTORY_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP
$LICENSE_DIR
$HOST_NAME
$K8S_SEED_HOSTNAME_SUFFIX
$PD_CONSOLE_PUBLIC_HOSTNAME
$KUBERNETES_PORT_443_TCP_PORT
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_ADDR
$ROOT_USER
$SERVER_BITS_DIR
$UNSAFE_CONTINUE_ON_ERROR
$PING_PRODUCT_VALIDATION
$RETRY_TIMEOUT_SECONDS
$PDGP_ENGINE_PUBLIC_PORT_HTTPS
$PF_ENGINE_PRIVATE_HOSTNAME
$SERVER_PROFILE_BRANCH
$PDP_ENGINE_PRIVATE_HOSTNAME
$KUBERNETES_PORT_443_TCP_PROTO
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PORT
$STARTUP_BACKGROUND_OPTS
$LOCATION
$IMAGE_VERSION
$REPLICATION_PORT
$PING_IDENTITY_DEVOPS_KEY
$PF_ADMIN_PRIVATE_HOSTNAME
$SAM_PINGDATACONSOLE_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PROTO
$TOPOLOGY_FILE
$COLORIZE_LOGS
$ENCRYPTION_PASSWORD_FILE
$PD_PROFILE
$_podInstanceName
$PA_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PORT
$CLEAN_STAGING_DIR
$HOOKS_DIR
$HTTPS_PORT
$POD_HOSTNAME
$PA_ADMIN_PUBLIC_PORT_HTTPS
$ORCHESTRATION_TYPE
$PDS_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PROTO
$STAGING_DIR
$K8S_CLUSTER
$PD_ENGINE_PUBLIC_PORT_HTTPS
$ROOT_USER_DN
$PF_ENGINE_PUBLIC_PORT_HTTPS
$PAZ_ENGINE_PRIVATE_HOSTNAME
$MAX_HEAP_SIZE
$PF_ADMIN_PUBLIC_PORT_HTTPS
$SERVER_PROFILE_URL
$K8S_POD_HOSTNAME_PREFIX
$KUBERNETES_SERVICE_PORT_HTTPS
$KUBERNETES_PORT_443_TCP
$K8S_CLUSTERS
$PAZP_ENGINE_PRIVATE_HOSTNAME
$K8S_STATEFUL_SET_NAME
$K8S_STATEFUL_SET_SERVICE_NAME
$PING_IDENTITY_DEVOPS_USER
$SAM_PINGDATACONSOLE_PORT_8443_TCP
$PD_DELEGATOR_PRIVATE_PORT_HTTPS
$KUBERNETES_SERVICE_HOST
$JAVA_HOME
$IMAGE_GIT_REV
$PWD
$_podLocation
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP
$SHIM
$ADMIN_USER_PASSWORD_FILE
$DISABLE_SCHEMA_REPLICATION
$FIPS_PROVIDER
$_podReplicationPort
$PDG_ENGINE_PRIVATE_PORT_HTTPS
$JVM_TUNING
$ROOT_USER_PASSWORD_FILE
$PD_CONSOLE_PRIVATE_HOSTNAME
$PA_ADMIN_PRIVATE_PORT_CLUSTERCONFIG
$OUT_DIR
$USER_BASE_DN
$LICENSE_SHORT_NAME
$LICENSE_VERSION
$PD_STATE
$K8S_INCREMENT_PORTS
$PAZ_ENGINE_PUBLIC_PORT_HTTPS
$PD_DELEGATOR_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_ADDR
$VERBOSE
$K8S_POD_HOSTNAME_SUFFIX
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT_HTTPS
$IN_DIR
$SECRETS_DIR
$PING_PRODUCT
$FIPS_MODE_ON'"'"
+ echo_green expanded
+ echo_color green expanded
+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' expanded '\033[0m'
    d - ./instance/config/java.properties.aarch64.subst.default .. [0;32mexpanded[0m
+ rm -f ./instance/config/java.properties.aarch64.subst.default
+ IFS= read -r template
+ printf '    d - %s .. ' ./pd.profile/dsconfig/01-license-gauge.dsconfig.subst.default
+ _effectiveFile=./pd.profile/dsconfig/01-license-gauge.dsconfig
+ _processDefault=true
+ test START '=' RESTART
+ test -f ./pd.profile/dsconfig/01-license-gauge.dsconfig
+ test true '=' true
+ getEnvKeys
+ env
+ sed -e 's/^/$/'
+ cut '-d=' -f1
+ envsubst ''"'"'$PA_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PUBLIC_HOSTNAME
$PAZP_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_ADDR
$PA_ADMIN_PRIVATE_PORT_HTTPS
$MAKELDIF_USERS
$KUBERNETES_SERVICE_PORT
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PORT
$KUBERNETES_PORT
$SAM_PINGFEDERATE_ENGINE_SERVICE_HOST
$SERVER_ROOT_DIR
$PING_IDENTITY_DEVOPS_FILE
$SECURITY_CHECKS_FILENAME
$STARTUP_COMMAND
$DOMAIN_NAME
$RUN_PLAN
$_seedInstanceName
$PDGP_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PROTO
$SAM_PINGFEDERATE_ADMIN_SERVICE_HOST
$LICENSE_FILE_NAME
$PD_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PORT
$HOSTNAME
$PA_ENGINE_PUBLIC_HOSTNAME
$PD_CONSOLE_PUBLIC_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PROTO
$SAM_PINGDIRECTORY_PORT_636_TCP_ADDR
$INSTANCE_NAME
$PA_ADMIN_PUBLIC_HOSTNAME
$PF_ENGINE_PRIVATE_PORT_HTTPS
$PDP_ENGINE_PRIVATE_PORT_HTTPS
$SERVER_PROFILE_UPDATE
$SHLVL
$PD_ENGINE_PRIVATE_PORT_LDAP
$PF_ADMIN_PRIVATE_PORT_HTTPS
$MOTD_URL
$HOME
$OLDPWD
$PD_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP_PORT
$LOCATION_VALIDATION
$PF_ADMIN_PUBLIC_BASEURL
$PDS_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT
$SAM_PINGDIRECTORY_PORT_636_TCP_PROTO
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT
$CONTAINER_ENV
$PING_IDENTITY_DEVOPS_KEY_REDACT
$PING_DEBUG
$SEED_LDAPS_PORT
$PF_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP_ADDR
$SAM_PINGFEDERATE_ADMIN_PORT
$JAVA_RAM_PERCENTAGE
$ADDITIONAL_SETUP_ARGS
$PDP_ENGINE_PUBLIC_HOSTNAME
$PS1
$PF_ADMIN_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP
$LOGS_DIR
$JMX_PORT
$_seedLocation
$PD_ENGINE_PRIVATE_PORT_LDAPS
$SERVER_PROFILE_PATH
$SERVER_PROFILE_DIR
$STARTUP_FOREGROUND_OPTS
$TAIL_LOG_FILES
$ENV
$_seedReplicationPort
$_DOLLAR_
$PAZ_ENGINE_PRIVATE_PORT_HTTPS
$PD_DELEGATOR_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP
$STAGING_MANIFEST
$PDS_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PROTO
$BASE
$DOLLAR
$PD_REBUILD_ON_RESTART
$PING_IDENTITY_ACCEPT_EULA
$PAZP_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_SERVICE_HOST
$SECURITY_CHECKS_STRICT
$LDAP_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAP
$SERVER_PROFILE_URL_REDACT
$ADMIN_USER_NAME
$POD_LDAPS_PORT
$PAZ_ENGINE_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP
$SAM_PINGDATACONSOLE_SERVICE_HOST
$CERTIFICATE_NICKNAME
$PD_CONSOLE_PRIVATE_PORT_HTTPS
$PAZP_ENGINE_PUBLIC_HOSTNAME
$PA_ENGINE_PRIVATE_HOSTNAME
$SEED_HOSTNAME
$PA_ADMIN_PRIVATE_HOSTNAME
$PD_DELEGATOR_PUBLIC_PORT_HTTPS
$KUBERNETES_PORT_443_TCP_ADDR
$LDAPS_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAPS
$SAM_PINGDATACONSOLE_PORT_8443_TCP_ADDR
$BAK_DIR
$PATH
$PD_ENGINE_PRIVATE_HOSTNAME
$K8S_NUM_REPLICAS
$PDG_ENGINE_PUBLIC_PORT_HTTPS
$K8S_SEED_CLUSTER
$SAM_PINGDIRECTORY_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP
$LICENSE_DIR
$HOST_NAME
$K8S_SEED_HOSTNAME_SUFFIX
$PD_CONSOLE_PUBLIC_HOSTNAME
$KUBERNETES_PORT_443_TCP_PORT
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_ADDR
$ROOT_USER
$SERVER_BITS_DIR
$UNSAFE_CONTINUE_ON_ERROR
$PING_PRODUCT_VALIDATION
$RETRY_TIMEOUT_SECONDS
$PDGP_ENGINE_PUBLIC_PORT_HTTPS
$PF_ENGINE_PRIVATE_HOSTNAME
$SERVER_PROFILE_BRANCH
$PDP_ENGINE_PRIVATE_HOSTNAME
$KUBERNETES_PORT_443_TCP_PROTO
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PORT
$STARTUP_BACKGROUND_OPTS
$LOCATION
$IMAGE_VERSION
$REPLICATION_PORT
$PING_IDENTITY_DEVOPS_KEY
$PF_ADMIN_PRIVATE_HOSTNAME
$SAM_PINGDATACONSOLE_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PROTO
$TOPOLOGY_FILE
$COLORIZE_LOGS
$ENCRYPTION_PASSWORD_FILE
$PD_PROFILE
$_podInstanceName
$PA_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PORT
$CLEAN_STAGING_DIR
$HOOKS_DIR
$HTTPS_PORT
$POD_HOSTNAME
$PA_ADMIN_PUBLIC_PORT_HTTPS
$ORCHESTRATION_TYPE
$PDS_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PROTO
$STAGING_DIR
$K8S_CLUSTER
$PD_ENGINE_PUBLIC_PORT_HTTPS
$ROOT_USER_DN
$PF_ENGINE_PUBLIC_PORT_HTTPS
$PAZ_ENGINE_PRIVATE_HOSTNAME
$MAX_HEAP_SIZE
$PF_ADMIN_PUBLIC_PORT_HTTPS
$SERVER_PROFILE_URL
$K8S_POD_HOSTNAME_PREFIX
$KUBERNETES_SERVICE_PORT_HTTPS
$KUBERNETES_PORT_443_TCP
$K8S_CLUSTERS
$PAZP_ENGINE_PRIVATE_HOSTNAME
$K8S_STATEFUL_SET_NAME
$K8S_STATEFUL_SET_SERVICE_NAME
$PING_IDENTITY_DEVOPS_USER
$SAM_PINGDATACONSOLE_PORT_8443_TCP
$PD_DELEGATOR_PRIVATE_PORT_HTTPS
$KUBERNETES_SERVICE_HOST
$JAVA_HOME
$IMAGE_GIT_REV
$PWD
$_podLocation
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP
$SHIM
$ADMIN_USER_PASSWORD_FILE
$DISABLE_SCHEMA_REPLICATION
$FIPS_PROVIDER
$_podReplicationPort
$PDG_ENGINE_PRIVATE_PORT_HTTPS
$JVM_TUNING
$ROOT_USER_PASSWORD_FILE
$PD_CONSOLE_PRIVATE_HOSTNAME
$PA_ADMIN_PRIVATE_PORT_CLUSTERCONFIG
$OUT_DIR
$USER_BASE_DN
$LICENSE_SHORT_NAME
$LICENSE_VERSION
$PD_STATE
$K8S_INCREMENT_PORTS
$PAZ_ENGINE_PUBLIC_PORT_HTTPS
$PD_DELEGATOR_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_ADDR
$VERBOSE
$K8S_POD_HOSTNAME_SUFFIX
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT_HTTPS
$IN_DIR
$SECRETS_DIR
$PING_PRODUCT
$FIPS_MODE_ON'"'"
+ echo_green expanded
+ echo_color green expanded
+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
    d - ./pd.profile/dsconfig/01-license-gauge.dsconfig.subst.default .. [0;32mexpanded[0m
+ printf '%b%s%b\n' '\033[0;32m' expanded '\033[0m'
+ rm -f ./pd.profile/dsconfig/01-license-gauge.dsconfig.subst.default
+ IFS= read -r template
+ printf '    d - %s .. ' ./pd.profile/dsconfig/01-remove-console.dsconfig.subst.default
+ _effectiveFile=./pd.profile/dsconfig/01-remove-console.dsconfig
+ _processDefault=true
+ test START '=' RESTART
+ test -f ./pd.profile/dsconfig/01-remove-console.dsconfig
+ _processDefault=false
+ test false '=' true
+ echo_yellow skipped
+ echo_color yellow skipped
+ toLower yellow
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' yellow
+ _color=yellow
+ shift
+ _colorCode='\033[0;33m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;33m' skipped '\033[0m'
+ rm -f ./pd.profile/dsconfig/01-remove-console.dsconfig.subst.default
+ IFS= read -r template
+ printf '    d - %s .. ' ./pd.profile/dsconfig/01-remove-host-monitor.dsconfig.subst.default
+ _effectiveFile=./pd.profile/dsconfig/01-remove-host-monitor.dsconfig
+ _processDefault=true
+ test START '=' RESTART
+ test -f ./pd.profile/dsconfig/01-remove-host-monitor.dsconfig
+ test true '=' true
+ getEnvKeys
+ sed -e 's/^/$/'
+ cut '-d=' -f1
+ env
+ envsubst ''"'"'$PA_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PUBLIC_HOSTNAME
$PAZP_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_ADDR
$PA_ADMIN_PRIVATE_PORT_HTTPS
$MAKELDIF_USERS
$KUBERNETES_SERVICE_PORT
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PORT
$KUBERNETES_PORT
$SAM_PINGFEDERATE_ENGINE_SERVICE_HOST
$SERVER_ROOT_DIR
$PING_IDENTITY_DEVOPS_FILE
$SECURITY_CHECKS_FILENAME
$STARTUP_COMMAND
$DOMAIN_NAME
$RUN_PLAN
$_seedInstanceName
$PDGP_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_PROTO
$SAM_PINGFEDERATE_ADMIN_SERVICE_HOST
$LICENSE_FILE_NAME
$PD_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PORT
$HOSTNAME
$PA_ENGINE_PUBLIC_HOSTNAME
$PD_CONSOLE_PUBLIC_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP_PROTO
$SAM_PINGDIRECTORY_PORT_636_TCP_ADDR
$INSTANCE_NAME
$PA_ADMIN_PUBLIC_HOSTNAME
$PF_ENGINE_PRIVATE_PORT_HTTPS
$PDP_ENGINE_PRIVATE_PORT_HTTPS
$SERVER_PROFILE_UPDATE
$SHLVL
$PD_ENGINE_PRIVATE_PORT_LDAP
$PF_ADMIN_PRIVATE_PORT_HTTPS
$MOTD_URL
$HOME
$OLDPWD
$PD_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP_PORT
$LOCATION_VALIDATION
$PF_ADMIN_PUBLIC_BASEURL
$PDS_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT
$SAM_PINGDIRECTORY_PORT_636_TCP_PROTO
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT
$CONTAINER_ENV
$PING_IDENTITY_DEVOPS_KEY_REDACT
$PING_DEBUG
$SEED_LDAPS_PORT
$PF_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP_ADDR
$SAM_PINGFEDERATE_ADMIN_PORT
$JAVA_RAM_PERCENTAGE
$ADDITIONAL_SETUP_ARGS
$PDP_ENGINE_PUBLIC_HOSTNAME
$PS1
$PF_ADMIN_PUBLIC_HOSTNAME
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP
$LOGS_DIR
$JMX_PORT
$_seedLocation
$PD_ENGINE_PRIVATE_PORT_LDAPS
$SERVER_PROFILE_PATH
$SERVER_PROFILE_DIR
$STARTUP_FOREGROUND_OPTS
$TAIL_LOG_FILES
$ENV
$_seedReplicationPort
$_DOLLAR_
$PAZ_ENGINE_PRIVATE_PORT_HTTPS
$PD_DELEGATOR_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_PORT_443_TCP
$STAGING_MANIFEST
$PDS_ENGINE_PUBLIC_HOSTNAME
$SAM_PINGDIRECTORY_PORT_389_TCP_PROTO
$BASE
$DOLLAR
$PD_REBUILD_ON_RESTART
$PING_IDENTITY_ACCEPT_EULA
$PAZP_ENGINE_PRIVATE_PORT_HTTPS
$PDG_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_SERVICE_HOST
$SECURITY_CHECKS_STRICT
$LDAP_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT_HTTPS
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAP
$SERVER_PROFILE_URL_REDACT
$ADMIN_USER_NAME
$POD_LDAPS_PORT
$PAZ_ENGINE_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGDIRECTORY_PORT_636_TCP
$SAM_PINGDATACONSOLE_SERVICE_HOST
$CERTIFICATE_NICKNAME
$PD_CONSOLE_PRIVATE_PORT_HTTPS
$PAZP_ENGINE_PUBLIC_HOSTNAME
$PA_ENGINE_PRIVATE_HOSTNAME
$SEED_HOSTNAME
$PA_ADMIN_PRIVATE_HOSTNAME
$PD_DELEGATOR_PUBLIC_PORT_HTTPS
$KUBERNETES_PORT_443_TCP_ADDR
$LDAPS_PORT
$SAM_PINGDIRECTORY_SERVICE_PORT_LDAPS
$SAM_PINGDATACONSOLE_PORT_8443_TCP_ADDR
$BAK_DIR
$PATH
$PD_ENGINE_PRIVATE_HOSTNAME
$K8S_NUM_REPLICAS
$PDG_ENGINE_PUBLIC_PORT_HTTPS
$K8S_SEED_CLUSTER
$SAM_PINGDIRECTORY_SERVICE_PORT
$SAM_PINGDIRECTORY_PORT
$SAM_PINGDIRECTORY_PORT_389_TCP
$LICENSE_DIR
$HOST_NAME
$K8S_SEED_HOSTNAME_SUFFIX
$PD_CONSOLE_PUBLIC_HOSTNAME
$KUBERNETES_PORT_443_TCP_PORT
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_ADDR
$ROOT_USER
$SERVER_BITS_DIR
$UNSAFE_CONTINUE_ON_ERROR
$PING_PRODUCT_VALIDATION
$RETRY_TIMEOUT_SECONDS
$PDGP_ENGINE_PUBLIC_PORT_HTTPS
$PF_ENGINE_PRIVATE_HOSTNAME
$SERVER_PROFILE_BRANCH
$PDP_ENGINE_PRIVATE_HOSTNAME
$KUBERNETES_PORT_443_TCP_PROTO
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PORT
$STARTUP_BACKGROUND_OPTS
$LOCATION
$IMAGE_VERSION
$REPLICATION_PORT
$PING_IDENTITY_DEVOPS_KEY
$PF_ADMIN_PRIVATE_HOSTNAME
$SAM_PINGDATACONSOLE_PORT
$SAM_PINGDATACONSOLE_SERVICE_PORT
$SAM_PINGDATACONSOLE_PORT_8443_TCP_PROTO
$TOPOLOGY_FILE
$COLORIZE_LOGS
$ENCRYPTION_PASSWORD_FILE
$PD_PROFILE
$_podInstanceName
$PA_ENGINE_PUBLIC_PORT_HTTPS
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PORT
$CLEAN_STAGING_DIR
$HOOKS_DIR
$HTTPS_PORT
$POD_HOSTNAME
$PA_ADMIN_PUBLIC_PORT_HTTPS
$ORCHESTRATION_TYPE
$PDS_ENGINE_PRIVATE_HOSTNAME
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP_PROTO
$STAGING_DIR
$K8S_CLUSTER
$PD_ENGINE_PUBLIC_PORT_HTTPS
$ROOT_USER_DN
$PF_ENGINE_PUBLIC_PORT_HTTPS
$PAZ_ENGINE_PRIVATE_HOSTNAME
$MAX_HEAP_SIZE
$PF_ADMIN_PUBLIC_PORT_HTTPS
$SERVER_PROFILE_URL
$K8S_POD_HOSTNAME_PREFIX
$KUBERNETES_SERVICE_PORT_HTTPS
$KUBERNETES_PORT_443_TCP
$K8S_CLUSTERS
    d - ./pd.profile/dsconfig/01-remove-console.dsconfig.subst.default .. [0;33mskipped[0m
$PAZP_ENGINE_PRIVATE_HOSTNAME
$K8S_STATEFUL_SET_NAME
$K8S_STATEFUL_SET_SERVICE_NAME
$PING_IDENTITY_DEVOPS_USER
$SAM_PINGDATACONSOLE_PORT_8443_TCP
$PD_DELEGATOR_PRIVATE_PORT_HTTPS
$KUBERNETES_SERVICE_HOST
$JAVA_HOME
$IMAGE_GIT_REV
$PWD
$_podLocation
$SAM_PINGFEDERATE_ADMIN_PORT_9999_TCP
$SHIM
$ADMIN_USER_PASSWORD_FILE
$DISABLE_SCHEMA_REPLICATION
$FIPS_PROVIDER
$_podReplicationPort
$PDG_ENGINE_PRIVATE_PORT_HTTPS
$JVM_TUNING
$ROOT_USER_PASSWORD_FILE
$PD_CONSOLE_PRIVATE_HOSTNAME
$PA_ADMIN_PRIVATE_PORT_CLUSTERCONFIG
$OUT_DIR
$USER_BASE_DN
$LICENSE_SHORT_NAME
$LICENSE_VERSION
$PD_STATE
$K8S_INCREMENT_PORTS
$PAZ_ENGINE_PUBLIC_PORT_HTTPS
$PD_DELEGATOR_PUBLIC_HOSTNAME
$PDGP_ENGINE_PRIVATE_PORT_HTTPS
$SAM_PINGFEDERATE_ENGINE_PORT_9031_TCP_ADDR
$VERBOSE
$K8S_POD_HOSTNAME_SUFFIX
$SAM_PINGFEDERATE_ENGINE_SERVICE_PORT_HTTPS
$IN_DIR
$SECRETS_DIR
$PING_PRODUCT
$FIPS_MODE_ON'"'"
+ echo_green expanded
+ echo_color green expanded
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' expanded '\033[0m'
+ rm -f ./pd.profile/dsconfig/01-remove-host-monitor.dsconfig.subst.default
    d - ./pd.profile/dsconfig/01-remove-host-monitor.dsconfig.subst.default .. [0;32mexpanded[0m
+ IFS= read -r template
+ rm tmp
+ cd /opt/staging
+ test -d _data.zip_
+ return 0
+ die_on_error 05 'Error running 05-expand-templates.sh'
+ _errorCode=0
+ _exitCode=05
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/05-expand-templates.sh.post
+ _runFile=/opt/staging/hooks/05-expand-templates.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/05-expand-templates.sh.post
+ echo 
+ die_on_error 05 'Error running 05-expand-templates.sh.post'
+ _errorCode=0
+ _exitCode=05
+ shift

+ test 0 -ne 0
+ run_hook 06-copy-product-bits.sh
+ _hookScript=06-copy-product-bits.sh
+ echo 06-copy-product-bits.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=06
+ test -z 06
+ run_if_present /opt/staging/hooks/06-copy-product-bits.sh.pre
+ _runFile=/opt/staging/hooks/06-copy-product-bits.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/06-copy-product-bits.sh.pre
+ echo 

+ die_on_error 06 'Error running 06-copy-product-bits.sh.pre'
+ _errorCode=0
+ _exitCode=06
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/06-copy-product-bits.sh
+ _runFile=/opt/staging/hooks/06-copy-product-bits.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/06-copy-product-bits.sh
+ sh -x /opt/staging/hooks/06-copy-product-bits.sh
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/06-copy-product-bits.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/06-copy-product-bits.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/06-copy-product-bits.sh'
+ toLower green
+ tr '[:upper:]' '[:lower:]'+ 
printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
[0;32m----- Starting hook: /opt/staging/hooks/06-copy-product-bits.sh[0m
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/06-copy-product-bits.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ test START '=' START
+ echo 'Copying SERVER_BITS_DIR (/opt/server) to SERVER_ROOT_DIR (/opt/out/instance)'
+ mkdir -p /opt/out/instance
Copying SERVER_BITS_DIR (/opt/server) to SERVER_ROOT_DIR (/opt/out/instance)
+ cp -Ru /opt/server/README /opt/server/README.md /opt/server/bak /opt/server/bat /opt/server/bin /opt/server/build-info.txt /opt/server/config /opt/server/csd-files /opt/server/db /opt/server/docs /opt/server/import-tmp /opt/server/ldif /opt/server/legal /opt/server/lib /opt/server/locks /opt/server/logs /opt/server/metrics /opt/server/profile-files /opt/server/resource /opt/server/revert-update /opt/server/setup /opt/server/tmp /opt/server/update /opt/server/velocity /opt/server/vendor_logo.png /opt/out/instance/
+ return 0
+ die_on_error 06 'Error running 06-copy-product-bits.sh'
+ _errorCode=0
+ _exitCode=06
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/06-copy-product-bits.sh.post
+ _runFile=/opt/staging/hooks/06-copy-product-bits.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/06-copy-product-bits.sh.post
+ echo 
+ die_on_error 06 'Error running 06-copy-product-bits.sh.post'
+ _errorCode=0
+ _exitCode=06
+ shift
+ test 0 -ne 0
+ run_hook 07-apply-server-profile.sh
+ _hookScript=07-apply-server-profile.sh
+ echo 07-apply-server-profile.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=07
+ test -z 07
+ run_if_present /opt/staging/hooks/07-apply-server-profile.sh.pre
+ _runFile=/opt/staging/hooks/07-apply-server-profile.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/07-apply-server-profile.sh.pre
+ echo 
+ die_on_error 07 'Error running 07-apply-server-profile.sh.pre'
+ _errorCode=0
+ _exitCode=07
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/07-apply-server-profile.sh
+ _runFile=/opt/staging/hooks/07-apply-server-profile.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/07-apply-server-profile.sh
+ sh -x /opt/staging/hooks/07-apply-server-profile.sh
+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/07-apply-server-profile.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/07-apply-server-profile.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/07-apply-server-profile.sh'


+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/07-apply-server-profile.sh' '\033[0m'
[0;32m----- Starting hook: /opt/staging/hooks/07-apply-server-profile.sh[0m
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ test -d /opt/staging/instance
+ find /opt/staging/instance -type f
+ read -r
merging /opt/staging/instance to /opt/out/instance
+ test START '=' START
+ echo 'merging /opt/staging/instance to /opt/out/instance'
+ copy_files /opt/staging/instance /opt/out/instance
+ SRC=/opt/staging/instance
+ DST=/opt/out/instance
+ test -e /opt/out/instance
+ test -d /opt/out/instance
+ cd /opt/staging/instance
+ find . -type f -exec cp -fL --parents '{}' /opt/out/instance ';'
+ return 0
+ die_on_error 07 'Error running 07-apply-server-profile.sh'
+ _errorCode=0
+ _exitCode=07
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/07-apply-server-profile.sh.post
+ _runFile=/opt/staging/hooks/07-apply-server-profile.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/07-apply-server-profile.sh.post
+ echo 
+ die_on_error 07 'Error running 07-apply-server-profile.sh.post'
+ _errorCode=0
+ _exitCode=07
+ shift
+ test 0 -ne 0
+ run_hook 09-build-motd.sh
+ _hookScript=09-build-motd.sh

+ echo 09-build-motd.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=09
+ test -z 09
+ run_if_present /opt/staging/hooks/09-build-motd.sh.pre
+ _runFile=/opt/staging/hooks/09-build-motd.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/09-build-motd.sh.pre
+ echo 
+ die_on_error 09 'Error running 09-build-motd.sh.pre'
+ _errorCode=0
+ _exitCode=09
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/09-build-motd.sh
+ _runFile=/opt/staging/hooks/09-build-motd.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/09-build-motd.sh

+ sh -x /opt/staging/hooks/09-build-motd.sh
+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/09-build-motd.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/09-build-motd.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/09-build-motd.sh'
+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/09-build-motd.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
[0;32m----- Starting hook: /opt/staging/hooks/09-build-motd.sh[0m
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ _motdFile=/etc/motd
+ _motdJsonFile=/tmp/motd.json
+ date '+%Y%m%d'
+ _currentDate=20210913
+ echo_bar
+ printf '################################################################################\n'
+ date
+ echo_bar
+ printf '################################################################################\n'
+ echo '
################################################################################
                Ping Identity DevOps Docker Image

       Version: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
   DevOps User: samirgandhi@pingidentity.com
      Hostname: sam-pingdirectory-0
       Started: Mon Sep 13 19:02:46 UTC 2021
################################################################################'
+ test -f /opt/staging/motd
+ cat /opt/staging/motd
+ test -z https://raw.githubusercontent.com/pingidentity/pingidentity-devops-getting-started/master/motd/motd.json
+ curl -G -o /tmp/motd.json -w '%{http_code}' https://raw.githubusercontent.com/pingidentity/pingidentity-devops-getting-started/master/motd/motd.json
+ _motdCurlResult=200
+ test 200 '=' 200
+ echo 'Successfully downloaded MOTD from https://raw.githubusercontent.com/pingidentity/pingidentity-devops-getting-started/master/motd/motd.json'
+ _jqExpr='.[] | select(.validFrom <= 20210913 and .validTo >= 20210913) |
               "\n---- SUBJECT: " + .subject + "\n" +
                         (.message | join("\n")) +
               "\n"'
Successfully downloaded MOTD from https://raw.githubusercontent.com/pingidentity/pingidentity-devops-getting-started/master/motd/motd.json
+ sed 's/-.*//'
+ echo pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
+ _imageName=pingdirectory
+ jq -r 'select (.devops != null) | .devops | .[] | select(.validFrom <= 20210913 and .validTo >= 20210913) |
               "\n---- SUBJECT: " + .subject + "\n" +
                         (.message | join("\n")) +
               "\n"' /tmp/motd.json
+ jq -r 'select (.pingdirectory != null) | .pingdirectory | .[] | select(.validFrom <= 20210913 and .validTo >= 20210913) |
               "\n---- SUBJECT: " + .subject + "\n" +
                         (.message | join("\n")) +
               "\n"' /tmp/motd.json
+ echo
+ echo_bar
+ printf '################################################################################\n'
+ echo 'Current /etc/motd'
Current /etc/motd
+ cat_indent /etc/motd
+ test -f /etc/motd
+ sed 's/^/    /'
    
    ################################################################################
                    Ping Identity DevOps Docker Image
    
           Version: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
       DevOps User: samirgandhi@pingidentity.com
          Hostname: sam-pingdirectory-0
           Started: Mon Sep 13 19:02:46 UTC 2021
    ################################################################################
    
                         Security Warning
    
    The server profile being used to configure this Ping Identity Docker Image
    is for demo and documentation purposes only. The configuration contains default
    keys/credentials etc and is not suitable for production as it carries a substantial
    security risk.
    
    For additional information, please see
    https://github.com/pingidentity/pingidentity-devops-getting-started/blob/master/SECURITY.md
    
    
    ################################################################################
+ return 0
+ die_on_error 09 'Error running 09-build-motd.sh'
+ _errorCode=0
+ _exitCode=09
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/09-build-motd.sh.post
+ _runFile=/opt/staging/hooks/09-build-motd.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/09-build-motd.sh.post
+ echo 
+ die_on_error 09 'Error running 09-build-motd.sh.post'
+ _errorCode=0
+ _exitCode=09
+ shift

+ test 0 -ne 0
+ return 0
+ die_on_error 01 'Error running 01-start-server.sh'
+ _errorCode=0
+ _exitCode=01
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/01-start-server.sh.post
+ _runFile=/opt/staging/hooks/01-start-server.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/01-start-server.sh.post
+ echo 

+ die_on_error 01 'Error running 01-start-server.sh.post'
+ _errorCode=0
+ _exitCode=01
+ shift
+ test 0 -ne 0
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ run_hook 10-start-sequence.sh
+ _hookScript=10-start-sequence.sh
+ echo 10-start-sequence.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=10
+ test -z 10
+ run_if_present /opt/staging/hooks/10-start-sequence.sh.pre
+ _runFile=/opt/staging/hooks/10-start-sequence.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/10-start-sequence.sh.pre
+ echo 
+ die_on_error 10 'Error running 10-start-sequence.sh.pre'

+ _errorCode=0
+ _exitCode=10
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/10-start-sequence.sh
+ _runFile=/opt/staging/hooks/10-start-sequence.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/10-start-sequence.sh
+ sh -x /opt/staging/hooks/10-start-sequence.sh
+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/10-start-sequence.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/10-start-sequence.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/10-start-sequence.sh'
+ toLower green
+ + trprintf '[:upper:]' '%s' '[:lower:]' green

+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/10-start-sequence.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
[0;32m----- Starting hook: /opt/staging/hooks/10-start-sequence.sh[0m
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
Initializing server for the first time
+ echo 'Initializing server for the first time'
+ run_hook 17-check-license.sh
+ _hookScript=17-check-license.sh
+ echo 17-check-license.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=17
+ test -z 17
+ run_if_present /opt/staging/hooks/17-check-license.sh.pre
+ _runFile=/opt/staging/hooks/17-check-license.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/17-check-license.sh.pre
+ echo 

+ die_on_error 17 'Error running 17-check-license.sh.pre'
+ _errorCode=0
+ _exitCode=17
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/17-check-license.sh
+ _runFile=/opt/staging/hooks/17-check-license.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/17-check-license.sh
+ sh -x /opt/staging/hooks/17-check-license.sh
+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/17-check-license.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/17-check-license.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/17-check-license.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
[0;32m----- Starting hook: /opt/staging/hooks/17-check-license.sh[0m
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/17-check-license.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ LICENSE_FILE=/opt/out/instance/PingDirectory.lic
+ _licenseAPI=https://license.pingidentity.com/devops/license
+ _checkLicenceAPI=https://license.pingidentity.com/devops/check-license
+ test -f /opt/out/instance/PingDirectory.lic
+ test '!' -z samirgandhi@pingidentity.com
+ test '!' -z 273b82bc-5d25-4a43-a163-099f313564ea
+ test -z PD
+ test -z 8.3
+ echo 'Pulling evaluation license from Ping Identity for:'
Pulling evaluation license from Ping Identity for:
   Prod License: PD - v8.3
+ echo '   Prod License: PD - v8.3'
+ echo '    DevOps User: samirgandhi@pingidentity.com...'
+ _resultCode=99
+ _retries=4
+ test 4 -gt 0
    DevOps User: samirgandhi@pingidentity.com...
+ _retries=3
+ _curl --header 'product: PD' --header 'version: 8.3' --header 'devops-user: samirgandhi@pingidentity.com' --header 'devops-key: 273b82bc-5d25-4a43-a163-099f313564ea' --header 'devops-app: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af' --header 'devops-purpose: get-license' https://license.pingidentity.com/devops/license --output /opt/out/instance/PingDirectory.lic
+ set -- --get --silent --show-error --write-out '%{http_code}' --location --connect-timeout 2 --retry 6 --retry-max-time 30 --retry-delay 3 --header 'product: PD' --header 'version: 8.3' --header 'devops-user: samirgandhi@pingidentity.com' --header 'devops-key: 273b82bc-5d25-4a43-a163-099f313564ea' --header 'devops-app: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af' --header 'devops-purpose: get-license' https://license.pingidentity.com/devops/license --output /opt/out/instance/PingDirectory.lic
+ isOS centos
+ _targetOS=centos
+ getOSID
+ parseOSRelease ID
+ test -n ID
+ awk '$0~/^ID=/ {split($1,id,"="); gsub(/"/,"",id[2]); print id[2];}'
+ _currentOS=alpine
+ test -n centos
+ test centos '=' alpine
+ return 1
+ isOS rhel
+ _targetOS=rhel
+ getOSID
+ parseOSRelease ID
+ test -n ID
+ awk '$0~/^ID=/ {split($1,id,"="); gsub(/"/,"",id[2]); print id[2];}'
+ _currentOS=alpine
+ test -n rhel
+ test rhel '=' alpine
+ return 1
+ set -- --retry-connrefused --get --silent --show-error --write-out '%{http_code}' --location --connect-timeout 2 --retry 6 --retry-max-time 30 --retry-delay 3 --header 'product: PD' --header 'version: 8.3' --header 'devops-user: samirgandhi@pingidentity.com' --header 'devops-key: 273b82bc-5d25-4a43-a163-099f313564ea' --header 'devops-app: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af' --header 'devops-purpose: get-license' https://license.pingidentity.com/devops/license --output /opt/out/instance/PingDirectory.lic
+ curl --retry-connrefused --get --silent --show-error --write-out '%{http_code}' --location --connect-timeout 2 --retry 6 --retry-max-time 30 --retry-delay 3 --header 'product: PD' --header 'version: 8.3' --header 'devops-user: samirgandhi@pingidentity.com' --header 'devops-key: 273b82bc-5d25-4a43-a163-099f313564ea' --header 'devops-app: pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af' --header 'devops-purpose: get-license' https://license.pingidentity.com/devops/license --output /opt/out/instance/PingDirectory.lic
+ HTTP_RESULT_CODE=200
+ test 200 '=' 200
+ return 0
+ _resultCode=0
+ test 0 -eq 0
+ break
+ rc=0
+ test 0 -eq 0
+ echo 
+ echo 'Successfully pulled evaluation license from Ping Identity'
+ test false '=' true
+ echo 

Successfully pulled evaluation license from Ping Identity

+ toLower YES
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' YES
+ licenseFound=true
+ test true '!=' true
+ return 0
+ die_on_error 17 'Error running 17-check-license.sh'
+ _errorCode=0
+ _exitCode=17
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/17-check-license.sh.post
+ _runFile=/opt/staging/hooks/17-check-license.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/17-check-license.sh.post
+ echo 

+ die_on_error 17 'Error running 17-check-license.sh.post'
+ _errorCode=0
+ _exitCode=17
+ shift
+ test 0 -ne 0
+ run_hook 18-setup-sequence.sh
+ _hookScript=18-setup-sequence.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ echo 18-setup-sequence.sh
+ _hookExit=18
+ test -z 18
+ run_if_present /opt/staging/hooks/18-setup-sequence.sh.pre
+ _runFile=/opt/staging/hooks/18-setup-sequence.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/18-setup-sequence.sh.pre
+ echo 
+ die_on_error 18 'Error running 18-setup-sequence.sh.pre'
+ _errorCode=0
+ _exitCode=18
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/18-setup-sequence.sh
+ _runFile=/opt/staging/hooks/18-setup-sequence.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/18-setup-sequence.sh
+ sh -x /opt/staging/hooks/18-setup-sequence.sh

+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/18-setup-sequence.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/18-setup-sequence.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/18-setup-sequence.sh'
+ toLower green
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' green
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/18-setup-sequence.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
[0;32m----- Starting hook: /opt/staging/hooks/18-setup-sequence.sh[0m
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ test '!' -f /opt/out/instance/config/server.uuid
+ run_hook 181-install-extensions.sh
+ _hookScript=181-install-extensions.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ echo 181-install-extensions.sh
+ _hookExit=181
+ test -z 181
+ run_if_present /opt/staging/hooks/181-install-extensions.sh.pre
+ _runFile=/opt/staging/hooks/181-install-extensions.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/181-install-extensions.sh.pre
+ echo 
+ die_on_error 181 'Error running 181-install-extensions.sh.pre'
+ _errorCode=0
+ _exitCode=181
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/181-install-extensions.sh
+ _runFile=/opt/staging/hooks/181-install-extensions.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/181-install-extensions.sh
+ sh -x /opt/staging/hooks/181-install-extensions.sh

+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/181-install-extensions.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/181-install-extensions.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/181-install-extensions.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
[0;32m----- Starting hook: /opt/staging/hooks/181-install-extensions.sh[0m
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/181-install-extensions.sh' '\033[0m'
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ EXTENSIONS_DIR=/opt/staging/extensions
+ PROFILE_EXTENSIONS_DIR=/opt/staging/pd.profile/server-sdk-extensions
+ test -d /opt/staging/extensions
+ extensionID=0
+ mktemp -d
+ _tmpExtDir=/tmp/tmp.LleEcF
+ printf '*\n*'
+ find /opt/staging/extensions -type f -name '*remote.list' '!' -name '*
*'
+ IFS= read -r remoteInstallFile
+ test -n /opt/staging/extensions/baseline.remote.list
+ test -f /opt/staging/extensions/baseline.remote.list
+ IFS=' ' read -r extensionUrl extensionSignatureUrl keyServer keyID
+ test -n https://extensions.ping.directory/ds-plugin-autoincrement/latest/extension.zip
+ extensionID=1
+ echo 'Extension #: 1'
Extension #: 1
  Extension URL: https://extensions.ping.directory/ds-plugin-autoincrement/latest/extension.zip
+ echo '  Extension URL: https://extensions.ping.directory/ds-plugin-autoincrement/latest/extension.zip'
+ echo '  Signature URL:  --not set ---'
+ test -n 
+ extensionFile=/tmp/tmp.LleEcF/extension-1.zip
+ curl -sSLo /tmp/tmp.LleEcF/extension-1.zip https://extensions.ping.directory/ds-plugin-autoincrement/latest/extension.zip
  Signature URL:  --not set ---
+ test -n 
+ toLower false
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' false
+ test false '=' false
+ echo_red 'The SHA1 signature not provided and insecure remote extensions are not allowed.'
+ echo_color red 'The SHA1 signature not provided and insecure remote extensions are not allowed.'
+ toLower red
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' red
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' 'The SHA1 signature not provided and insecure remote extensions are not allowed.' '\033[0m'
[0;31mThe SHA1 signature not provided and insecure remote extensions are not allowed.[0m
+ echo_red '  set '"'"'ENABLE_INSECURE_REMOTE_EXTENSIONS=true'"'"' to allow.  Skipping...'
+ echo_color red '  set '"'"'ENABLE_INSECURE_REMOTE_EXTENSIONS=true'"'"' to allow.  Skipping...'
+ toLower red
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' red
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' '  set '"'"'ENABLE_INSECURE_REMOTE_EXTENSIONS=true'"'"' to allow.  Skipping...' '\033[0m'
+ continue
[0;31m  set 'ENABLE_INSECURE_REMOTE_EXTENSIONS=true' to allow.  Skipping...[0m
+ IFS=' ' read -r extensionUrl extensionSignatureUrl keyServer keyID
+ test -n 
+ IFS= read -r remoteInstallFile
+ rm tmp
+ rm -rf /tmp/tmp.LleEcF
+ return 0
+ die_on_error 181 'Error running 181-install-extensions.sh'
+ _errorCode=0
+ _exitCode=181
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/181-install-extensions.sh.post
+ _runFile=/opt/staging/hooks/181-install-extensions.sh.post
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/181-install-extensions.sh.post
+ echo 

+ die_on_error 181 'Error running 181-install-extensions.sh.post'
+ _errorCode=0
+ _exitCode=181
+ shift
+ test 0 -ne 0
+ run_hook 182-pre-setup.sh
+ _hookScript=182-pre-setup.sh
+ echo 182-pre-setup.sh
+ sed 's/^\([0-9]*\).*$/\1/g'
+ _hookExit=182
+ test -z 182
+ run_if_present /opt/staging/hooks/182-pre-setup.sh.pre
+ _runFile=/opt/staging/hooks/182-pre-setup.sh.pre
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/182-pre-setup.sh.pre
+ sh -x /opt/staging/hooks/182-pre-setup.sh.pre
+ echo Hello from the baseline server profile 182-pre-setup.sh.pre 'hook!'
+ echo '====> USER_BASE_DN=[dc=example,dc=com]'
Hello from the baseline server profile 182-pre-setup.sh.pre hook!
====> USER_BASE_DN=[dc=example,dc=com]
+ echo 'dc=example,dc=com'
+ sed 's/^dc=\([^,]*\).*/\1/'
+ computedDomain=example
+ sed 's/^o=\([^,]*\).*/\1/'
+ echo 'dc=example,dc=com'
+ computedOrg='dc=example,dc=com'
+ test 'dc=example,dc=com' '=' example
+ cat
+ return 0
+ die_on_error 182 'Error running 182-pre-setup.sh.pre'
+ _errorCode=0
+ _exitCode=182
+ shift
+ test 0 -ne 0
+ run_if_present /opt/staging/hooks/182-pre-setup.sh
+ _runFile=/opt/staging/hooks/182-pre-setup.sh
+ _commandSet=sh
+ true
+ _commandSet='sh -x'
+ test -f /opt/staging/hooks/182-pre-setup.sh
+ sh -x /opt/staging/hooks/182-pre-setup.sh
+ test true '=' true
+ set -x
+ . /opt/staging/hooks/pingcommon.lib.sh
+ test true '=' true
+ set -x
+ CALLING_HOOK=/opt/staging/hooks/182-pre-setup.sh
+ test -f /run/secrets/devops-secret
+ echo_green '----- Starting hook: /opt/staging/hooks/182-pre-setup.sh'
+ echo_color green '----- Starting hook: /opt/staging/hooks/182-pre-setup.sh'
+ toLower green
+ printf '%s' green
+ tr '[:upper:]' '[:lower:]'
+ _color=green
+ shift
+ _colorCode='\033[0;32m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;32m' '----- Starting hook: /opt/staging/hooks/182-pre-setup.sh' '\033[0m'
[0;32m----- Starting hook: /opt/staging/hooks/182-pre-setup.sh[0m
+ source_container_env
+ test -f /opt/staging/.env
+ set -o allexport
+ . /opt/staging/.env
+ export 'PD_DELEGATOR_PUBLIC_HOSTNAME=localhost'
+ export 'PD_DELEGATOR_PUBLIC_PORT_HTTPS=6443'
+ export 'PF_ENGINE_PRIVATE_HOSTNAME=sam-pingfederate-engine'
+ export 'PF_ENGINE_PUBLIC_HOSTNAME=localhost'
+ export 'PF_ENGINE_PUBLIC_PORT_HTTPS=9031'
+ export 'PF_ENGINE_PRIVATE_PORT_HTTPS=9031'
+ export 'CERTIFICATE_NICKNAME=ping'
+ ORCHESTRATION_TYPE=KUBERNETES
+ RUN_PLAN=START
+ PD_STATE=SETUP
+ INSTANCE_NAME=sam-pingdirectory-0.usa
+ _podInstanceName=sam-pingdirectory-0.usa
+ POD_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _podLocation=usa
+ POD_LDAPS_PORT=1636
+ _podReplicationPort=8989
+ _seedInstanceName=sam-pingdirectory-0.usa
+ SEED_HOSTNAME=sam-pingdirectory-0.usa.internal.ping-cluster.com
+ _seedLocation=usa
+ SEED_LDAPS_PORT=1636
+ _seedReplicationPort=8989
+ LDAPS_PORT=1636
+ LOCATION=usa
+ REPLICATION_PORT=8989
+ BASE_VALUE=example
+ BASE_ATTRIBUTE=dc
+ BASE_CLASS=domain
+ set +o allexport
+ source_secret_envs
+ test -d /run/secrets
+ find /run/secrets -type f -name '*.env' -print
+ IFS= read -r _envFile
+ rm -f /tmp/_envFile
+ test -f /opt/staging/hooks/pingdata.lib.sh
+ . /opt/staging/hooks/pingdata.lib.sh
+ test true '=' true
+ set -x
+ SETUP_ARGUMENTS_FILE=/opt/staging/pd.profile/setup-arguments.txt
+ _configLDIF=/opt/out/instance/config/config.ldif
+ JVM_STATE_DIR=/opt/out/jvm-settings-state
+ test -f /opt/staging/hooks/pingdirectory.lib.sh
+ . /opt/staging/hooks/pingdirectory.lib.sh
+ . /opt/staging/hooks/pingdata.lib.sh
+ test true '=' true
+ set -x
+ SETUP_ARGUMENTS_FILE=/opt/staging/pd.profile/setup-arguments.txt
+ _configLDIF=/opt/out/instance/config/config.ldif
+ JVM_STATE_DIR=/opt/out/jvm-settings-state
+ test KUBERNETES '=' KUBERNETES
+ isImageVersionGtEq 8.2.0
+ getSemanticImageVersion
+ echo pingdirectory-alpine_3.14-az11-8.3.0.1-210910-60af
+ grep -Eo '[0-9]+\.[0-9]+\.[0-9]'
+ version=8.3.0
+ echo 8.3.0
+ awk -F. '{ print $1 }'
+ major=8
+ echo 8.3.0
+ awk -F. '{ print $2 }'
+ minor=3
+ echo 8.3.0
+ awk -F. '{ print $3 }'
+ patch=0
+ aVersion=8.2.0
+ awk -F. '{ print $1 }'
+ echo 8.2.0
+ aMajor=8
+ awk -F. '{ print $2 }'
+ echo 8.2.0
+ aMinor=2
+ echo 8.2.0
+ awk -F. '{ print $3 }'
+ aPatch=0
+ test 8 -gt 8
+ test 8 -eq 8
+ test 2 -gt 3
+ test 8 -eq 8
+ test 2 -eq 3
+ echo 0
+ test 0 -eq 0
+ getIP sam-pingdirectory-0.usa.internal.ping-cluster.com
+ getent hosts sam-pingdirectory-0.usa.internal.ping-cluster.com
+ awk '{print $1}'
+ test -z 
+ echo_red Detected:
+ echo_color red Detected:
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' Detected: '\033[0m'
+ echo_red '  - Container running in Kubernetes'
+ echo_color red '  - Container running in Kubernetes'
+ toLower red
+ printf '%s' red
[0;31mDetected:[0m
+ tr '[:upper:]' '[:lower:]'
[0;31m  - Container running in Kubernetes[0m
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' '  - Container running in Kubernetes' '\033[0m'
+ echo_red '  - Running version 8.2 or higher'
+ echo_color red '  - Running version 8.2 or higher'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
[0;31m  - Running version 8.2 or higher[0m
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' '  - Running version 8.2 or higher' '\033[0m'
+ echo_red '  - The Kubernetes service providing IP for '"'"'sam-pingdirectory-0.usa.internal.ping-cluster.com'"'"' isn'"'"'t returning any value'
+ echo_color red '  - The Kubernetes service providing IP for '"'"'sam-pingdirectory-0.usa.internal.ping-cluster.com'"'"' isn'"'"'t returning any value'
+ toLower red
+ tr+  '[:upper:]'printf '[:lower:]' '%s'
 red
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
[0;31m  - The Kubernetes service providing IP for 'sam-pingdirectory-0.usa.internal.ping-cluster.com' isn't returning any value[0m
+ printf '%b%s%b\n' '\033[0;31m' '  - The Kubernetes service providing IP for '"'"'sam-pingdirectory-0.usa.internal.ping-cluster.com'"'"' isn'"'"'t returning any value' '\033[0m'
+ echo_red 
+ echo_color red 
+ toLower red
+ printf '%s' red
[0;31m[0m
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m'  '\033[0m'
+ echo_red 'This implies that the Kubernetes service isn'"'"'t providing the annotations allowing for'
+ echo_color red 'This implies that the Kubernetes service isn'"'"'t providing the annotations allowing for'
+ toLower red
+ tr '[:upper:]' '[:lower:]'
+ printf '%s' red
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' 'This implies that the Kubernetes service isn'"'"'t providing the annotations allowing for' '\033[0m'
[0;31mThis implies that the Kubernetes service isn't providing the annotations allowing for[0m
+ echo_red 'unready hosts to be discovered.'
+ echo_color red 'unready hosts to be discovered.'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
[0;31munready hosts to be discovered.[0m
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' 'unready hosts to be discovered.' '\033[0m'
+ echo_red 
+ echo_color red 
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
[0;31m[0m
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m'  '\033[0m'
+ echo_red 'RESOLUTION - Create/Add a separate cluster service with the following annotations/spec'
+ echo_color red 'RESOLUTION - Create/Add a separate cluster service with the following annotations/spec'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' 'RESOLUTION - Create/Add a separate cluster service with the following annotations/spec' '\033[0m'
[0;31mRESOLUTION - Create/Add a separate cluster service with the following annotations/spec[0m
+ echo_red 
+ echo_color red 
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
[0;31m[0m
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m'  '\033[0m'
+ echo_red '  metadata:'
+ echo_color red '  metadata:'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
[0;31m  metadata:[0m
+ printf '%b%s%b\n' '\033[0;31m' '  metadata:' '\033[0m'
+ echo_red '    annotations:'
+ echo_color red '    annotations:'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' '    annotations:' '\033[0m'
+ echo_red '      service.alpha.kubernetes.io/tolerate-unready-endpoints: true'
[0;31m    annotations:[0m
+ echo_color red '      service.alpha.kubernetes.io/tolerate-unready-endpoints: true'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' '      service.alpha.kubernetes.io/tolerate-unready-endpoints: true' '\033[0m'
[0;31m      service.alpha.kubernetes.io/tolerate-unready-endpoints: true[0m
+ echo_red '  spec:'
+ echo_color red '  spec:'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' '  spec:' '\033[0m'
[0;31m  spec:[0m
+ echo_red '    publishNotReadyAddresses: true'
+ echo_color red '    publishNotReadyAddresses: true'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' '    publishNotReadyAddresses: true' '\033[0m'
+ echo_red 
+ echo_color red 
+ toLower red
+ printf '%s' red
[0;31m    publishNotReadyAddresses: true[0m
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m'  '\033[0m'
[0;31m[0m
+ container_failure 182 'Resolve issues with pingdirectory Kubernetes cluster service, and restart'
+ _exitCode=182
+ shift
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ test  '=' true
+ echo_red 'CONTAINER FAILURE: Resolve issues with pingdirectory Kubernetes cluster service, and restart'
+ echo_color red 'CONTAINER FAILURE: Resolve issues with pingdirectory Kubernetes cluster service, and restart'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' 'CONTAINER FAILURE: Resolve issues with pingdirectory Kubernetes cluster service, and restart' '\033[0m'
+ exit 182
+ return 182
+ die_on_error 182 'Error running 182-pre-setup.sh'
+ _errorCode=182
+ _exitCode=182
+ shift
+ test 182 -ne 0
+ container_failure 182 'Error running 182-pre-setup.sh'
+ _exitCode=182
+ shift
[0;31mCONTAINER FAILURE: Resolve issues with pingdirectory Kubernetes cluster service, and restart[0m
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ test  '=' true
+ echo_red 'CONTAINER FAILURE: Error running 182-pre-setup.sh'
+ echo_color red 'CONTAINER FAILURE: Error running 182-pre-setup.sh'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
[0;31mCONTAINER FAILURE: Error running 182-pre-setup.sh[0m
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' 'CONTAINER FAILURE: Error running 182-pre-setup.sh' '\033[0m'
+ exit 182
+ return 182
+ die_on_error 18 'Error running 18-setup-sequence.sh'
+ _errorCode=182
+ _exitCode=18
+ shift
+ test 182 -ne 0
+ container_failure 18 'Error running 18-setup-sequence.sh'
+ _exitCode=18
+ shift
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ test  '=' true
+ echo_red 'CONTAINER FAILURE: Error running 18-setup-sequence.sh'
+ echo_color red 'CONTAINER FAILURE: Error running 18-setup-sequence.sh'
+ toLower red
+ printf '%s' red
+ tr '[:upper:]' '[:lower:]'
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
+ printf '%b%s%b\n' '\033[0;31m' 'CONTAINER FAILURE: Error running 18-setup-sequence.sh' '\033[0m'
+ exit 18
[0;31mCONTAINER FAILURE: Error running 18-setup-sequence.sh[0m
+ return 18
+ die_on_error 10 'Error running 10-start-sequence.sh'
+ _errorCode=18
+ _exitCode=10
+ shift
+ test 18 -ne 0
+ container_failure 10 'Error running 10-start-sequence.sh'
+ _exitCode=10
+ shift
+ toLower 
+ printf '%s' 
+ tr '[:upper:]' '[:lower:]'
+ test  '=' true
+ echo_red 'CONTAINER FAILURE: Error running 10-start-sequence.sh'
+ echo_color red 'CONTAINER FAILURE: Error running 10-start-sequence.sh'
+ toLower red
+ tr '[:upper:]'+  '[:lower:]'printf
 '%s' red
+ _color=red
+ shift
+ _colorCode='\033[0;31m'
+ _endColor='\033[0m'
+ test true '=' true
[0;31mCONTAINER FAILURE: Error running 10-start-sequence.sh[0m
+ printf '%b%s%b\n' '\033[0;31m' 'CONTAINER FAILURE: Error running 10-start-sequence.sh' '\033[0m'
+ exit 10
